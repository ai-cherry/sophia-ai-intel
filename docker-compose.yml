services:
  # ===========================================
  # Core AI Orchestration Layer
  # ===========================================

  agno-coordinator:
    build:
      context: ./services/agno-coordinator
      dockerfile: Dockerfile
    container_name: agno-coordinator
    ports:
      - "8080:8080"
      - "9090:9090"
    env_file: ./.env
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - ENABLE_TRACING=true
      - JAEGER_ENDPOINT=http://jaeger-collector:14268/api/traces
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_URL=${POSTGRES_URL}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./services/agno-coordinator:/app
    depends_on:
      - redis
      - qdrant
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MCP Services Layer
  # ===========================================

  mcp-agents:
    build:
      context: .
      dockerfile: ./services/mcp-agents/Dockerfile
    container_name: mcp-agents
    ports:
      - "8000:8000"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-agents:/app
    depends_on:
      - redis
      - qdrant
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-context:
    build:
      context: ./services/mcp-context
      dockerfile: Dockerfile
    container_name: mcp-context
    ports:
      - "8081:8081"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - PORT=8081
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDING_MODEL=text-embedding-ada-002
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-context:/app
      - context-data:/app/data
    depends_on:
      - redis
      - qdrant
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-github:
    build:
      context: ./services/mcp-github
      dockerfile: Dockerfile
    container_name: mcp-github
    ports:
      - "8082:8082"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - PORT=8082
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-github:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-hubspot:
    build:
      context: ./services/mcp-hubspot
      dockerfile: Dockerfile
    container_name: mcp-hubspot
    ports:
      - "8083:8083"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - PORT=8083
      - HUBSPOT_API_KEY=${HUBSPOT_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-hubspot:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-lambda:
    build:
      context: ./services/mcp-lambda
      dockerfile: Dockerfile
    container_name: mcp-lambda
    ports:
      - "8084:8084"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - PORT=8084
      - LAMBDA_API_KEY=${LAMBDA_API_KEY}
      - LAMBDA_CLOUD_ENDPOINT=${LAMBDA_CLOUD_ENDPOINT}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-lambda:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-research:
    build:
      context: ./services/mcp-research
      dockerfile: Dockerfile
    container_name: mcp-research
    ports:
      - "8085:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-research:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-business:
    build:
      context: ./services/mcp-business
      dockerfile: Dockerfile
    container_name: mcp-business
    ports:
      - "8086:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-business:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # AI Teams Services
  # ===========================================

  agno-teams:
    build:
      context: .
      dockerfile: ./services/agno-teams/Dockerfile
    container_name: agno-teams
    ports:
      - "8087:8087"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PORT=8087
      - HOST=0.0.0.0
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/agno-teams:/app
    depends_on:
      - redis
      - qdrant
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  agno-wrappers:
    build:
      context: .
      dockerfile: ./services/agno-wrappers/Dockerfile
    container_name: agno-wrappers
    ports:
      - "8089:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/agno-wrappers:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Additional MCP Services
  # ===========================================

  mcp-apollo:
    build:
      context: ./services/mcp-apollo
      dockerfile: Dockerfile
    container_name: mcp-apollo
    ports:
      - "8090:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - APOLLO_API_KEY=${APOLLO_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-apollo:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-gong:
    build:
      context: ./services/mcp-gong
      dockerfile: Dockerfile
    container_name: mcp-gong
    ports:
      - "8091:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - GONG_ACCESS_KEY=${GONG_ACCESS_KEY}
      - GONG_ACCESS_KEY_SECRET=${GONG_ACCESS_KEY_SECRET}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-gong:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-salesforce:
    build:
      context: ./services/mcp-salesforce
      dockerfile: Dockerfile
    container_name: mcp-salesforce
    ports:
      - "8092:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - SALESFORCE_CLIENT_ID=${SALESFORCE_CLIENT_ID}
      - SALESFORCE_CLIENT_SECRET=${SALESFORCE_CLIENT_SECRET}
      - SALESFORCE_USERNAME=${SALESFORCE_USERNAME}
      - SALESFORCE_PASSWORD=${SALESFORCE_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-salesforce:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-slack:
    build:
      context: ./services/mcp-slack
      dockerfile: Dockerfile
    container_name: mcp-slack
    ports:
      - "8093:8080"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./services/mcp-slack:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # LLM Services
  # ===========================================

  portkey-llm:
    build:
      context: ./llm/portkey-llm
      dockerfile: Dockerfile
    container_name: portkey-llm
    ports:
      - "8007:8000"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./llm/portkey-llm:/app
    depends_on:
      - redis
      - postgres
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Agents Swarm Service
  # ===========================================

  agents-swarm:
    build:
      context: ./agents/swarm
      dockerfile: Dockerfile
    container_name: agents-swarm
    ports:
      - "8008:8000"
    env_file: ./.env
    environment:
      - ENVIRONMENT=production
      - PORTKEY_LLM_URL=http://portkey-llm:8000
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./agents/swarm:/app
    depends_on:
      - redis
      - postgres
      - portkey-llm
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Orchestrator Service
  # ===========================================

  orchestrator:
    build:
      context: .
      dockerfile: ./services/orchestrator/Dockerfile
    container_name: orchestrator
    ports:
      - "8088:8088"
    env_file: ./.env
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - PORT=8088
      - HOST=0.0.0.0
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./services/orchestrator:/app
    depends_on:
      - redis
      - qdrant
      - postgres
      - agno-teams
      - mcp-context
      - mcp-github
      - mcp-hubspot
      - mcp-business
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Infrastructure Services
  # ===========================================

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
       - "6379:6379"
    env_file: ./.env
    environment:
      - REDIS_USER_KEY=${REDIS_USER_KEY}
      - REDIS_ACCOUNT_KEY=${REDIS_ACCOUNT_KEY}
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - redis-data:/data
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    env_file: ./.env
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_MANAGEMENT_KEY=${QDRANT_MANAGEMENT_KEY}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_CLUSTER_API_KEY=${QDRANT_CLUSTER_API_KEY}
      - QDRANT_ACCOUNT_ID=${QDRANT_ACCOUNT_ID}
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    env_file: ./.env
    environment:
      - POSTGRES_DB=sophia
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Monitoring Stack
  # ===========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - sophia-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - sophia-network
    restart: unless-stopped
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - sophia-network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
    networks:
      - sophia-network
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml

  # ===========================================
  # Load Balancer / Reverse Proxy
  # ===========================================

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    env_file: ./.env
    environment:
      - DNSIMPLE_API_KEY=${DNSIMPLE_API_KEY}
      - DOCKER_PAT=${DOCKER_PAT}
    volumes:
      - ./nginx.conf.ssl:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
      - ./acme-challenge:/var/www/html/.well-known/acme-challenge
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis-data:
  qdrant-data:
  postgres-data:
  context-data:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  sophia-network:
    driver: bridge