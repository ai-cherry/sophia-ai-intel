# Sophia AI Intel Platform - Pure Pulumi Cloud Deployment
# Complete containerized microservices stack


networks:
  sophia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    external: true
    name: monitoring_monitoring

volumes:
  postgres-data:
  redis-data:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

services:
  # =============================================================================
  # FRONTEND - DASHBOARD
  # =============================================================================
  
  sophia-dashboard:
    build:
      context: ./apps/dashboard
      dockerfile: Dockerfile
    container_name: sophia-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://sophia-orchestrator:8080
      - VITE_BUILD_ID=${BUILD_ID:-local}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"

  # =============================================================================
  # CORE MCP SERVICES
  # =============================================================================

  sophia-research:
    build:
      context: ./services/mcp-research
      dockerfile: Dockerfile
    container_name: sophia-research
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - DEFAULT_LLM_MODEL=gpt-4
      - SERPAPI_API_KEY=${TAVILY_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - TOGETHER_API_KEY=${OPENROUTER_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  sophia-context:
    build:
      context: ./services/mcp-context
      dockerfile: Dockerfile
    container_name: sophia-context
    ports:
      - "8082:8080"
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  sophia-github:
    build:
      context: ./services/mcp-github
      dockerfile: Dockerfile
    container_name: sophia-github
    ports:
      - "8083:8080"
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_INSTALLATION_ID=${GITHUB_INSTALLATION_ID}
      - GITHUB_PRIVATE_KEY=${GITHUB_PRIVATE_KEY}
      - GITHUB_REPO=ai-cherry/sophia-ai-intel
      - DASHBOARD_ORIGIN=http://sophia-dashboard:3000
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  sophia-business:
    build:
      context: ./services/mcp-business
      dockerfile: Dockerfile
    container_name: sophia-business
    ports:
      - "8084:8080"
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - APOLLO_API_KEY=${APOLLO_API_KEY}
      - USERGEMS_API_KEY=${USERGEMS_API_KEY}
      - HUBSPOT_ACCESS_TOKEN=${HUBSPOT_ACCESS_TOKEN}
      - SALESFORCE_CLIENT_ID=${SALESFORCE_CLIENT_ID}
      - SALESFORCE_CLIENT_SECRET=${SALESFORCE_CLIENT_SECRET}
      - SALESFORCE_USERNAME=${SALESFORCE_USERNAME}
      - SALESFORCE_PASSWORD=${SALESFORCE_PASSWORD}
      - SALESFORCE_SECURITY_TOKEN=${SALESFORCE_SECURITY_TOKEN}
      - SALESFORCE_DOMAIN=${SALESFORCE_DOMAIN}
      - GONG_BASE_URL=${GONG_BASE_URL}
      - GONG_ACCESS_KEY=${GONG_ACCESS_KEY}
      - GONG_ACCESS_KEY_SECRET=${GONG_ACCESS_KEY_SECRET}
      - GONG_CLIENT_ACCESS_KEY=${GONG_CLIENT_ACCESS_KEY}
      - GONG_CLIENT_SECRET=${GONG_CLIENT_SECRET}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - ZILLOW_API_KEY=${ZILLOW_API_KEY}
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - QDRANT_URL=${QDRANT_URL}
      - REDIS_URL=${REDIS_URL}
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  sophia-lambda:
    build:
      context: ./services/mcp-lambda
      dockerfile: Dockerfile
    container_name: sophia-lambda
    ports:
      - "8085:8080"
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - LAMBDA_API_KEY=${LAMBDA_API_KEY}
      - LAMBDA_PRIVATE_SSH_KEY=${LAMBDA_PRIVATE_SSH_KEY}
      - LAMBDA_PUBLIC_SSH_KEY=${LAMBDA_PUBLIC_SSH_KEY}
      - LAMBDA_API_ENDPOINT=https://cloud.lambdalabs.com/api/v1
      - DATABASE_URL=${NEON_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  sophia-hubspot:
    build:
      context: ./services/mcp-hubspot
      dockerfile: Dockerfile
    container_name: sophia-hubspot
    ports:
      - "8086:8080"
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - HUBSPOT_ACCESS_TOKEN=${HUBSPOT_ACCESS_TOKEN}
      - HUBSPOT_CLIENT_SECRET=${HUBSPOT_CLIENT_SECRET}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  sophia-agents:
    build:
      context: .
      dockerfile: ./services/mcp-agents/Dockerfile
    container_name: sophia-agents
    ports:
      - "8087:8000"
    environment:
      - PORT=8000
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/libs:/app
      - DASHBOARD_ORIGIN=http://sophia-dashboard:3000
      - GITHUB_MCP_URL=http://sophia-github:8080
      - CONTEXT_MCP_URL=http://sophia-context:8080
      - RESEARCH_MCP_URL=http://sophia-research:8080
      - BUSINESS_MCP_URL=http://sophia-business:8080
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_INSTALLATION_ID=${GITHUB_INSTALLATION_ID}
      - GITHUB_PRIVATE_KEY=${GITHUB_PRIVATE_KEY}
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - TENANT=pay-ready
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    depends_on:
      - sophia-context
      - sophia-github
      - sophia-research
      - sophia-business
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/metrics"

  # sophia-orchestrator: TEMPORARILY DISABLED - TypeScript build issues
  # Will be re-enabled once dependencies are resolved

  # =============================================================================
  # BACKGROUND SERVICES
  # =============================================================================

  sophia-jobs:
    build:
      context: ./jobs
      dockerfile: Dockerfile
    container_name: sophia-jobs
    environment:
      - PYTHONUNBUFFERED=1
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TENANT=pay-ready
    networks:
      sophia-network:
        ipv4_address: 172.20.0.30
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - sophia-network
      - monitoring
    restart: unless-stopped
    depends_on:
      - sophia-dashboard
      - sophia-research
      - sophia-context
      - sophia-github
      - sophia-business
      - sophia-lambda
      - sophia-hubspot
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # =============================================================================
  # MONITORING & OBSERVABILITY - ENABLED FOR PHASE 3
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: sophia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - cadvisor
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"
      - "prometheus.io/path=/metrics"

  grafana:
    image: grafana/grafana:latest
    container_name: sophia-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - monitoring
      - sophia-network
    depends_on:
      - prometheus
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: sophia-cadvisor
    ports:
      - "8900:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring
    privileged: true
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: sophia-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9100"
      - "prometheus.io/path=/metrics"

  loki:
    image: grafana/loki:latest
    container_name: sophia-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3100"
      - "prometheus.io/path=/metrics"

  promtail:
    image: grafana/promtail:latest
    container_name: sophia-promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9080"
      - "prometheus.io/path=/metrics"

# =============================================================================
# HEALTH CHECK ENDPOINT
# =============================================================================

  health-check:
    image: curlimages/curl:latest
    container_name: health-check
    networks:
      - sophia-network
    restart: "no"
    command: |
      sh -c "
        echo 'Waiting for services to start...'
        sleep 30
        echo 'Running health checks...'
        curl -f http://sophia-dashboard:3000/healthz && echo 'Dashboard: OK' || echo 'Dashboard: FAIL'
        curl -f http://sophia-research:8080/healthz && echo 'Research: OK' || echo 'Research: FAIL'
        curl -f http://sophia-context:8080/healthz && echo 'Context: OK' || echo 'Context: FAIL'
        curl -f http://sophia-github:8080/healthz && echo 'GitHub: OK' || echo 'GitHub: FAIL'
        curl -f http://sophia-business:8080/healthz && echo 'Business: OK' || echo 'Business: FAIL'
        curl -f http://sophia-lambda:8080/healthz && echo 'Lambda: OK' || echo 'Lambda: FAIL'
        curl -f http://sophia-hubspot:8080/healthz && echo 'HubSpot: OK' || echo 'HubSpot: FAIL'
        curl -f http://sophia-agents:8000/healthz && echo 'Agents: OK' || echo 'Agents: FAIL'
        echo 'Health check complete!'
      "
# Simple trigger - Mon Aug 25 10:24:55 UTC 2025
