version: '3.8'

services:
  # ===========================================
  # Core AI Orchestration Layer (Optimized)
  # ===========================================

  agno-coordinator:
    build:
      context: ./services/agno-coordinator
      dockerfile: Dockerfile
    container_name: agno-coordinator
    ports:
      - "8080:8080"
    env_file: ./.env.production.real
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
    volumes:
      - ./services/agno-coordinator:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # Consolidated MCP Services
  # ===========================================

  mcp-core:
    build:
      context: .
      dockerfile: ./services/mcp-agents/Dockerfile
    container_name: mcp-core
    ports:
      - "8000:8000"
      - "8081:8081"
      - "8085:8085"
    env_file: ./.env.production.real
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./services/mcp-agents:/app/agents
      - ./services/mcp-context:/app/context
      - ./services/mcp-research:/app/research
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -q --spider http://localhost:8000/health && wget -q --spider http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-integrations:
    build:
      context: .
      dockerfile: ./services/mcp-github/Dockerfile
    container_name: mcp-integrations
    ports:
      - "8082:8082"
      - "8083:8083"
      - "8091:8091"
      - "8092:8092"
    env_file: ./.env.production.real
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
    volumes:
      - ./services/mcp-github:/app/github
      - ./services/mcp-hubspot:/app/hubspot
      - ./services/mcp-gong:/app/gong
      - ./services/mcp-salesforce:/app/salesforce
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.35"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # Orchestrator Service (Optimized)
  # ===========================================

  orchestrator:
    build:
      context: .
      dockerfile: ./services/orchestrator/Dockerfile
    container_name: orchestrator
    ports:
      - "8088:8088"
    env_file: ./.env.production.real
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
    volumes:
      - ./services/orchestrator:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mcp-core:
        condition: service_healthy
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # Chat Coordinator (Optimized)
  # ===========================================

  chat-coordinator:
    build:
      context: ./services/chat-coordinator
      dockerfile: Dockerfile
    container_name: chat-coordinator
    ports:
      - "8095:8095"
    env_file: ./.env.production.real
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
    volumes:
      - ./services/chat-coordinator:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # Sophia Brain (Optimized)
  # ===========================================

  sophia-brain:
    build:
      context: ./services/sophia-brain
      dockerfile: Dockerfile
    container_name: sophia-brain
    ports:
      - "8099:8099"
    env_file: ./.env.production.real
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=${POSTGRES_URL}
    volumes:
      - ./services/sophia-brain:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.35"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8099/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # Infrastructure Services (Optimized)
  # ===========================================

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
       - "6380:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    env_file: ./.env.production.real
    environment:
      - POSTGRES_DB=sophia
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sophia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:6333"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # Monitoring Stack (Optimized)
  # ===========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    depends_on:
      - prometheus

  # ===========================================
  # Load Balancer / API Gateway
  # ===========================================

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf.optimized:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    networks:
      - sophia-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.15"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - mcp-core
      - orchestrator

volumes:
  redis-data:
  postgres-data:
  qdrant-data:
  prometheus-data:
  grafana-data:

networks:
  sophia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16