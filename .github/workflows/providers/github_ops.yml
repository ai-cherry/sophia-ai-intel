name: GitHub Operations (Reusable)

on:
  workflow_call:
    inputs:
      action:
        required: true
        type: string
        description: "protect|audit"
      payload:
        required: false
        type: string
        default: '{}'
        description: "Action payload JSON"
    secrets:
      GITHUB_APP_ID:
        required: true
      GITHUB_INSTALLATION_ID:
        required: true
      GITHUB_PRIVATE_KEY:
        required: true

jobs:
  github-operation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create proof directories
        run: |
          mkdir -p proofs/github proofs/repo

      - name: Validate inputs
        run: |
          echo "::add-mask::${{ secrets.GITHUB_PRIVATE_KEY }}"
          echo "Action: ${{ inputs.action }}"
          echo "Payload: ${{ inputs.payload }}"
          test -n "${{ secrets.GITHUB_APP_ID }}" || { 
            echo '{"status": "failure", "errors": [{"provider": "github", "code": "missing-app-id", "message": "GITHUB_APP_ID required"}]}' > proofs/github/error.json
            exit 1
          }
          test -n "${{ secrets.GITHUB_INSTALLATION_ID }}" || { 
            echo '{"status": "failure", "errors": [{"provider": "github", "code": "missing-installation-id", "message": "GITHUB_INSTALLATION_ID required"}]}' > proofs/github/error.json
            exit 1
          }
          test -n "${{ secrets.GITHUB_PRIVATE_KEY }}" || { 
            echo '{"status": "failure", "errors": [{"provider": "github", "code": "missing-private-key", "message": "GITHUB_PRIVATE_KEY required"}]}' > proofs/github/error.json
            exit 1
          }

      - name: Setup GitHub App authentication
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.GITHUB_APP_ID }}
          private-key: ${{ secrets.GITHUB_PRIVATE_KEY }}

      - name: Branch protection
        if: ${{ inputs.action == 'protect' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          echo "🔐 Updating branch protection for main"
          
          # Parse payload for custom protection rules
          PAYLOAD='${{ inputs.payload }}'
          REQUIRED_CHECKS=$(echo "$PAYLOAD" | jq -r '.required_checks // ["Deploy All (Dashboard + MCPs) — Fly (Docker-only, Proof-first)"]')
          REQUIRE_REVIEW=$(echo "$PAYLOAD" | jq -r '.require_review // true')
          DISMISS_STALE=$(echo "$PAYLOAD" | jq -r '.dismiss_stale_reviews // true')
          REQUIRE_CODEOWNERS=$(echo "$PAYLOAD" | jq -r '.require_code_owner_reviews // true')
          
          # Update branch protection
          gh api repos/ai-cherry/sophia-ai-intel/branches/main/protection \
            --method PUT \
            --field required_status_checks='{"strict":true,"contexts":'$(echo "$REQUIRED_CHECKS" | jq -c .)'}' \
            --field enforce_admins=true \
            --field required_pull_request_reviews='{"dismiss_stale_reviews":'$DISMISS_STALE',"require_code_owner_reviews":'$REQUIRE_CODEOWNERS',"required_approving_review_count":1}' \
            --field restrictions=null > proofs/repo/branch_protection.json 2>/dev/null || {
              echo '{"status": "failure", "errors": [{"provider": "github", "code": "insufficient-scope", "message": "GitHub App lacks branch protection permissions"}]}' > proofs/github/protection_error.json
              exit 1
            }
          
          echo "✅ Branch protection updated"

      - name: Secrets audit (names only)
        if: ${{ inputs.action == 'audit' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          echo "🔍 Auditing GitHub Actions secrets (names only)"
          
          # Try to list repository secrets
          REPO_SECRETS=$(gh api repos/ai-cherry/sophia-ai-intel/actions/secrets 2>/dev/null | jq -r '.secrets[].name' | sort || echo "")
          
          # Try to list organization secrets (if accessible)
          ORG_SECRETS=$(gh api orgs/ai-cherry/actions/secrets 2>/dev/null | jq -r '.secrets[].name' | sort || echo "")
          
          if [ -z "$REPO_SECRETS" ] && [ -z "$ORG_SECRETS" ]; then
            echo '{"status": "failure", "errors": [{"provider": "github", "code": "insufficient-scope", "message": "GitHub App lacks secrets read permissions"}]}' > proofs/github/secrets_error.json
            echo "❌ Cannot access secrets - insufficient permissions"
          else
            # Build secrets audit report (names only)
            cat > proofs/github/secrets_audit.json << EOF
            {
              "status": "success",
              "query": "github_secrets_audit",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
              "repository_secrets": [
                $(echo "$REPO_SECRETS" | sed 's/^/"/; s/$/",/' | sed '$ s/,$//')
              ],
              "organization_secrets": [
                $(echo "$ORG_SECRETS" | sed 's/^/"/; s/$/",/' | sed '$ s/,$//')
              ],
              "total_repo_secrets": $(echo "$REPO_SECRETS" | wc -l),
              "total_org_secrets": $(echo "$ORG_SECRETS" | wc -l),
              "security_note": "Only secret names are logged - values are never exposed"
            }
            EOF
            echo "✅ Secrets audit completed (names only)"
          fi

      - name: Commit proofs
        run: |
          git config user.name "sophia-bot"
          git config user.email "sophia-bot@users.noreply.github.com"
          git add proofs/github/ proofs/repo/ 2>/dev/null || true
          git commit -m "[proof] github/${{ inputs.action }}: operation completed" || true
          git push || true

      - name: Operation summary
        run: |
          echo "✅ GitHub operation '${{ inputs.action }}' completed"
          echo "🏢 App ID: ${{ secrets.GITHUB_APP_ID }}"
          echo "📊 Run ID: ${{ github.run_id }}"
          echo "📁 Proofs: proofs/github/, proofs/repo/"