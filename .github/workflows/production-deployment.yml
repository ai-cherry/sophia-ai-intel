name: Production Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PRODUCTION_TAG: v1.0.0
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      is-production-tag: ${{ steps.check-tag.outputs.is-production }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if production tag
        id: check-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/${{ env.PRODUCTION_TAG }} ]]; then
            echo "is-production=true" >> $GITHUB_OUTPUT
          else
            echo "is-production=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: validate-tag
    if: needs.validate-tag.outputs.is-production-tag == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PRODUCTION_TAG }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=production-{{sha}}
            type=raw,value=${{ env.PRODUCTION_TAG }}

      - name: Build and push MCP Context service
        uses: docker/build-push-action@v5
        with:
          context: ./services/mcp-context
          push: true
          tags: ${{ steps.meta.outputs.tags }}-mcp-context
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push MCP Business service
        uses: docker/build-push-action@v5
        with:
          context: ./services/mcp-business
          push: true
          tags: ${{ steps.meta.outputs.tags }}-mcp-business
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Sonic AI service
        uses: docker/build-push-action@v5
        with:
          context: ./services/sonic-ai
          push: true
          tags: ${{ steps.meta.outputs.tags }}-sonic-ai
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    needs: [validate-tag, build-and-push]
    if: needs.validate-tag.outputs.is-production-tag == 'true' && github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PRODUCTION_TAG }}

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Apply configurations in order
          kubectl apply -f k8s-deploy/manifests/rbac.yaml
          kubectl apply -f k8s-deploy/manifests/cert-manager.yaml
          kubectl apply -f k8s-deploy/manifests/external-secrets.yaml
          kubectl apply -f k8s-deploy/manifests/pvcs.yaml
          kubectl apply -f k8s-deploy/manifests/configmap-production.yaml
          kubectl apply -f k8s-deploy/manifests/secret-management.yaml

          # Deploy services
          kubectl apply -f k8s-deploy/manifests/mcp-context.yaml
          kubectl apply -f k8s-deploy/manifests/mcp-business.yaml
          kubectl apply -f k8s-deploy/manifests/sonic-ai.yaml

          # Deploy ingress and monitoring
          kubectl apply -f k8s-deploy/manifests/ingress-enhanced-ssl.yaml
          kubectl apply -f k8s-deploy/manifests/hpa.yaml
          kubectl apply -f k8s-deploy/manifests/advanced-alerts.yaml

      - name: Wait for rollout
        run: |
          kubectl wait --for=condition=available --timeout=600s deployment/mcp-context
          kubectl wait --for=condition=available --timeout=600s deployment/mcp-business
          kubectl wait --for=condition=available --timeout=600s deployment/sonic-ai

      - name: Run health checks
        run: |
          ./k8s-deploy/scripts/comprehensive-health-check.sh

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment completed successfully!"
          echo "Tag: ${{ env.PRODUCTION_TAG }}"
          echo "Commit: ${{ github.sha }}"
          echo "Time: $(date)"

  notify-failure:
    needs: [validate-tag, build-and-push, deploy-production]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment failure
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Tag: ${{ env.PRODUCTION_TAG }}"
          echo "Please check the logs and resolve issues before retrying."
          exit 1