name: Deploy All (Dashboard + MCPs) — Fly (Docker-only, Proof-first)

on:
  workflow_dispatch:
    inputs:
      deploy_dashboard:
        description: "Deploy dashboard"
        required: false
        default: "true"
      deploy_services:
        description: "Deploy MCP services (repo, research, context, business)"
        required: false
        default: "true"

permissions:
  contents: write

env:
  # Apps & URLs (Pay Ready org - canonical -v2 names)
  APP_DASHBOARD:    sophiaai-dashboard-v2
  URL_DASHBOARD:    https://sophiaai-dashboard-v2.fly.dev

  APP_MCP_REPO:     sophiaai-mcp-repo-v2
  URL_MCP_REPO:     https://sophiaai-mcp-repo-v2.fly.dev

  APP_MCP_RESEARCH: sophiaai-mcp-research-v2
  URL_MCP_RESEARCH: https://sophiaai-mcp-research-v2.fly.dev

  APP_MCP_CONTEXT:  sophiaai-mcp-context-v2
  URL_MCP_CONTEXT:  https://sophiaai-mcp-context-v2.fly.dev

  APP_MCP_BUSINESS: sophiaai-mcp-business-v2
  URL_MCP_BUSINESS: https://sophiaai-mcp-business-v2.fly.dev

  # Fly organization (Pay Ready)
  FLY_ORG:          pay-ready

  # Build-id for fingerprints and cache-busting
  BUILD_ID:         ${{ github.run_id }}
  CACHE_BUSTER:     ${{ github.run_id }}

jobs:
  preflight:
    name: Preflight (repo & secrets)
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_TOKEN_PAY_READY }}
    steps:
      - uses: actions/checkout@v4

      - name: Make proofs dirs
        run: |
          mkdir -p proofs/healthz proofs/build proofs/fly proofs/scans

      - name: Check Fly token
        run: |
          echo "::add-mask::$FLY_API_TOKEN"
          test -n "$FLY_API_TOKEN" || { echo "❌ Missing FLY_API_TOKEN"; exit 1; }
          echo "✅ Fly token exists (won't be printed)."

  deploy-dashboard:
    if: ${{ github.event.inputs.deploy_dashboard != 'false' }}
    name: Deploy Dashboard (static Docker) + Proofs
    runs-on: ubuntu-latest
    needs: preflight
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_TOKEN_PAY_READY }}
      FLY_ORG: pay-ready
      APP: sophiaai-dashboard-v2
      URL: https://sophiaai-dashboard-v2.fly.dev
    steps:
      - uses: actions/checkout@v4

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Fly auth sanity check
        run: |
          echo "::add-mask::$FLY_API_TOKEN"
          test -n "$FLY_API_TOKEN" || (echo "FLY_API_TOKEN missing" && exit 1)
          flyctl version --access-token "$FLY_API_TOKEN"
          # This should print your Fly account email/org if token is valid
          flyctl auth whoami --access-token "$FLY_API_TOKEN"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install root workspaces (if any)
        run: |
          if [ -f package.json ] && grep -q '"workspaces"' package.json; then
            npm ci --workspaces --no-audit --no-fund || true
          fi

      - name: Build shared libs (contracts/clients) if present
        run: |
          if [ -d libs/contracts ]; then (cd libs/contracts && npm ci --no-audit --no-fund && npm run build || true); fi
          if [ -d libs/clients ]; then (cd libs/clients && npm ci --no-audit --no-fund && npm run build || true); fi
      
      - name: npm ci & build (dashboard)
        working-directory: apps/dashboard
        run: |
          set -e
          npm ci --no-audit --no-fund || npm ci --no-audit --no-fund --legacy-peer-deps
          # if CI memory is tight, uncomment:
          # export NODE_OPTIONS=--max-old-space-size=4096
          npm run build | tee ../../proofs/build/dashboard_npm_build.txt
          test -d dist || { echo "dist/ missing"; exit 2; }

      - name: Verify dist exists
        working-directory: apps/dashboard
        run: ls -la dist

      - name: Save npm-debug.log if present
        if: failure()
        working-directory: apps/dashboard
        run: |
          test -f npm-debug.log && cp npm-debug.log ../../proofs/build/npm-debug.log || true

      - name: Ensure Fly app exists
        working-directory: apps/dashboard
        run: |
          pwd
          ls -la
          flyctl apps show ${{ env.APP }} --access-token "$FLY_API_TOKEN" >/dev/null 2>&1 || flyctl apps create ${{ env.APP }} --machines --org "$FLY_ORG" --access-token "$FLY_API_TOKEN" --yes

      - name: Deploy dashboard (Dockerfile.static)
        working-directory: apps/dashboard
        env:
          VITE_BUILD_ID: ${{ env.BUILD_ID }}
        run: |
          pwd
          ls -la Dockerfile.static fly.toml dist/ || true
          flyctl deploy \
            --app ${{ env.APP }} \
            --config ./fly.toml \
            --dockerfile ./Dockerfile.static \
            --build-arg VITE_BUILD_ID \
            --build-arg CACHE_BUSTER=${{ env.CACHE_BUSTER }} \
            --access-token "$FLY_API_TOKEN" \
            --no-cache --yes

      - name: Wait for /healthz
        run: |
          for i in $(seq 1 30); do
            OUT="$(curl -i -sS '${{ env.URL }}/healthz' || true)"
            CODE="$(printf "%s" "$OUT" | head -n1 | awk '{print $2}')"
            printf "%02d/30 → %s\n" "$i" "${CODE:-N/A}"
            printf "%s\n" "$OUT" > proofs/healthz/${{ env.APP }}.txt
            [ "$CODE" = "200" ] && break
            sleep 6
          done
          grep -q " 200 " proofs/healthz/${{ env.APP }}.txt

      - name: Write /__build and HEAD main asset
        shell: bash
        run: |
          set -e
          curl -sS '${{ env.URL }}/__build' | tee proofs/build/dashboard_build.txt
          # extract first main asset from homepage
          ASSET=$(curl -sS '${{ env.URL }}/' | grep -o '/assets/[^"]*\.js' | head -n1 || true)
          if [ -n "$ASSET" ]; then
            curl -I -sS "${{ env.URL }}${ASSET}" | tee proofs/build/dashboard_asset_head.txt
          else
            echo "No /assets/*.js found in homepage" | tee proofs/build/dashboard_asset_head.txt
          fi

      - name: Machines JSON
        run: |
          flyctl machines list -a ${{ env.APP }} --access-token "$FLY_API_TOKEN" --json | tee proofs/fly/${{ env.APP }}_machines.json

      - name: Commit dashboard proofs
        run: |
          git config user.name  "sophia-bot"
          git config user.email "sophia-bot@users.noreply.github.com"
          git add proofs/healthz/${{ env.APP }}.txt proofs/build/dashboard_build.txt proofs/build/dashboard_asset_head.txt proofs/fly/${{ env.APP }}_machines.json
          git commit -m "[proof] dashboard: healthz + build fingerprint + asset head + machines" || true
          git push || true

  deploy-services:
    if: ${{ github.event.inputs.deploy_services != 'false' }}
    name: Deploy MCP Services (repo, research, context, business) + Proofs
    runs-on: ubuntu-latest
    needs: preflight
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_TOKEN_PAY_READY }}
      FLY_ORG: pay-ready
    strategy:
      matrix:
        include:
          - name: mcp-repo
            app:  sophiaai-mcp-repo-v2
            url:  https://sophiaai-mcp-repo-v2.fly.dev
            path: services/mcp-github
            set_secrets: "false"
          - name: mcp-research
            app:  sophiaai-mcp-research-v2
            url:  https://sophiaai-mcp-research-v2.fly.dev
            path: services/mcp-research
            set_secrets: "true"
          - name: mcp-context
            app:  sophiaai-mcp-context-v2
            url:  https://sophiaai-mcp-context-v2.fly.dev
            path: services/mcp-context
            set_secrets: "true"
          - name: mcp-business
            app:  sophiaai-mcp-business-v2
            url:  https://sophiaai-mcp-business-v2.fly.dev
            path: services/mcp-business
            set_secrets: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Fly auth sanity check
        run: |
          echo "::add-mask::$FLY_API_TOKEN"
          test -n "$FLY_API_TOKEN" || (echo "FLY_API_TOKEN missing" && exit 1)
          flyctl version --access-token "$FLY_API_TOKEN"
          # This should print your Fly account email/org if token is valid
          flyctl auth whoami --access-token "$FLY_API_TOKEN"

      - name: Ensure app exists
        run: |
          flyctl apps show ${{ matrix.app }} --access-token "$FLY_API_TOKEN" >/dev/null 2>&1 || flyctl apps create ${{ matrix.app }} --machines --org "$FLY_ORG" --access-token "$FLY_API_TOKEN" --yes

      - name: Set Fly secrets (names only)
        if: ${{ matrix.set_secrets == 'true' }}
        env:
          # Research providers
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY }}
          APIFY_API_KEY: ${{ secrets.APIFY_API_KEY }}
          ZENROWS_API_KEY: ${{ secrets.ZENROWS_API_KEY }}
          BRIGHTDATA_API_KEY: ${{ secrets.BRIGHTDATA_API_KEY }}
          PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          # Business providers
          APOLLO_API_KEY: ${{ secrets.APOLLO_API_KEY }}
          USERGEMS_API_KEY: ${{ secrets.USERGEMS_API_KEY }}
          HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          SALESFORCE_CLIENT_ID: ${{ secrets.SALESFORCE_CLIENT_ID }}
          SALESFORCE_CLIENT_SECRET: ${{ secrets.SALESFORCE_CLIENT_SECRET }}
          SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
          SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}
          SALESFORCE_SECURITY_TOKEN: ${{ secrets.SALESFORCE_SECURITY_TOKEN }}
          SALESFORCE_DOMAIN: ${{ secrets.SALESFORCE_DOMAIN }}
          GONG_BASE_URL: ${{ secrets.GONG_BASE_URL }}
          GONG_ACCESS_KEY: ${{ secrets.GONG_ACCESS_KEY }}
          GONG_ACCESS_KEY_SECRET: ${{ secrets.GONG_ACCESS_KEY_SECRET }}
          GONG_CLIENT_ACCESS_KEY: ${{ secrets.GONG_CLIENT_ACCESS_KEY }}
          GONG_CLIENT_SECRET: ${{ secrets.GONG_CLIENT_SECRET }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          ZILLOW_API_KEY: ${{ secrets.ZILLOW_API_KEY }}
          # Storage
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          QDRANT_ENDPOINT: ${{ secrets.QDRANT_ENDPOINT }}
        run: |
          # Research providers (for research service)
          if [ "${{ matrix.name }}" = "mcp-research" ]; then
            [ "${TAVILY_API_KEY}" != "" ] && flyctl secrets set TAVILY_API_KEY="${TAVILY_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SERPER_API_KEY}" != "" ] && flyctl secrets set SERPER_API_KEY="${SERPER_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${PERPLEXITY_API_KEY}" != "" ] && flyctl secrets set PERPLEXITY_API_KEY="${PERPLEXITY_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${EXA_API_KEY}" != "" ] && flyctl secrets set EXA_API_KEY="${EXA_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${APIFY_API_KEY}" != "" ] && flyctl secrets set APIFY_API_KEY="${APIFY_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${ZENROWS_API_KEY}" != "" ] && flyctl secrets set ZENROWS_API_KEY="${ZENROWS_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${BRIGHTDATA_API_KEY}" != "" ] && flyctl secrets set BRIGHTDATA_API_KEY="${BRIGHTDATA_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${PORTKEY_API_KEY}" != "" ] && flyctl secrets set PORTKEY_API_KEY="${PORTKEY_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${OPENROUTER_API_KEY}" != "" ] && flyctl secrets set OPENROUTER_API_KEY="${OPENROUTER_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${REDIS_URL}" != "" ] && flyctl secrets set REDIS_URL="${REDIS_URL}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
          fi
          
          # Business providers (for business service)
          if [ "${{ matrix.name }}" = "mcp-business" ]; then
            # CRM providers
            [ "${APOLLO_API_KEY}" != "" ] && flyctl secrets set APOLLO_API_KEY="${APOLLO_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${USERGEMS_API_KEY}" != "" ] && flyctl secrets set USERGEMS_API_KEY="${USERGEMS_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${HUBSPOT_ACCESS_TOKEN}" != "" ] && flyctl secrets set HUBSPOT_ACCESS_TOKEN="${HUBSPOT_ACCESS_TOKEN}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            # Salesforce OAuth
            [ "${SALESFORCE_CLIENT_ID}" != "" ] && flyctl secrets set SALESFORCE_CLIENT_ID="${SALESFORCE_CLIENT_ID}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SALESFORCE_CLIENT_SECRET}" != "" ] && flyctl secrets set SALESFORCE_CLIENT_SECRET="${SALESFORCE_CLIENT_SECRET}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SALESFORCE_USERNAME}" != "" ] && flyctl secrets set SALESFORCE_USERNAME="${SALESFORCE_USERNAME}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SALESFORCE_PASSWORD}" != "" ] && flyctl secrets set SALESFORCE_PASSWORD="${SALESFORCE_PASSWORD}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SALESFORCE_SECURITY_TOKEN}" != "" ] && flyctl secrets set SALESFORCE_SECURITY_TOKEN="${SALESFORCE_SECURITY_TOKEN}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SALESFORCE_DOMAIN}" != "" ] && flyctl secrets set SALESFORCE_DOMAIN="${SALESFORCE_DOMAIN}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            # Revenue intelligence
            [ "${GONG_BASE_URL}" != "" ] && flyctl secrets set GONG_BASE_URL="${GONG_BASE_URL}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${GONG_ACCESS_KEY}" != "" ] && flyctl secrets set GONG_ACCESS_KEY="${GONG_ACCESS_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${GONG_ACCESS_KEY_SECRET}" != "" ] && flyctl secrets set GONG_ACCESS_KEY_SECRET="${GONG_ACCESS_KEY_SECRET}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${GONG_CLIENT_ACCESS_KEY}" != "" ] && flyctl secrets set GONG_CLIENT_ACCESS_KEY="${GONG_CLIENT_ACCESS_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${GONG_CLIENT_SECRET}" != "" ] && flyctl secrets set GONG_CLIENT_SECRET="${GONG_CLIENT_SECRET}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            # Communication
            [ "${SLACK_BOT_TOKEN}" != "" ] && flyctl secrets set SLACK_BOT_TOKEN="${SLACK_BOT_TOKEN}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${SLACK_SIGNING_SECRET}" != "" ] && flyctl secrets set SLACK_SIGNING_SECRET="${SLACK_SIGNING_SECRET}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            # Optional providers
            [ "${ZILLOW_API_KEY}" != "" ] && flyctl secrets set ZILLOW_API_KEY="${ZILLOW_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${PORTKEY_API_KEY}" != "" ] && flyctl secrets set PORTKEY_API_KEY="${PORTKEY_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${OPENROUTER_API_KEY}" != "" ] && flyctl secrets set OPENROUTER_API_KEY="${OPENROUTER_API_KEY}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${REDIS_URL}" != "" ] && flyctl secrets set REDIS_URL="${REDIS_URL}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            [ "${QDRANT_ENDPOINT}" != "" ] && flyctl secrets set QDRANT_ENDPOINT="${QDRANT_ENDPOINT}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
            # Storage (critical)
            [ "${NEON_DATABASE_URL}" != "" ] && flyctl secrets set NEON_DATABASE_URL="${NEON_DATABASE_URL}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || true
          fi
          
          # Context DB (for context service only)
          if [ "${{ matrix.name }}" = "mcp-context" ] && [ "${NEON_DATABASE_URL}" != "" ]; then
            flyctl secrets set NEON_DATABASE_URL="${NEON_DATABASE_URL}" -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN"
          fi

      - name: Deploy service (Dockerfile)
        working-directory: ${{ matrix.path }}
        run: |
          pwd
          ls -la
          flyctl apps show ${{ matrix.app }} --access-token "$FLY_API_TOKEN" || flyctl apps create ${{ matrix.app }} --machines --org "$FLY_ORG" --access-token "$FLY_API_TOKEN" --yes
          flyctl deploy \
            --app ${{ matrix.app }} \
            --config ./fly.toml \
            --dockerfile ./Dockerfile \
            --build-arg CACHE_BUSTER=${{ env.CACHE_BUSTER }} \
            --access-token "$FLY_API_TOKEN" \
            --no-cache --yes

      - name: Wait for /healthz
        run: |
          for i in $(seq 1 30); do
            OUT="$(curl -i -sS '${{ matrix.url }}/healthz' || true)"
            CODE="$(printf "%s" "$OUT" | head -n1 | awk '{print $2}')"
            printf "%02d/30 → %s\n" "$i" "${CODE:-N/A}"
            printf "%s\n" "$OUT" > proofs/healthz/${{ matrix.app }}.txt
            [ "$CODE" = "200" ] && break
            sleep 6
          done
          if ! grep -q " 200 " proofs/healthz/${{ matrix.app }}.txt; then
            echo "Service not healthy; capturing logs…"
            flyctl logs -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" --since 20m | tail -n 400 > proofs/fly/${{ matrix.app }}_logs.txt || true
          fi

      - name: Capture Fly logs on failure
        if: failure()
        run: |
          flyctl logs -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" --since 20m | tail -n 400 > proofs/fly/${{ matrix.app }}_logs.txt || true

      - name: Machines JSON
        run: |
          flyctl machines list -a ${{ matrix.app }} --access-token "$FLY_API_TOKEN" --json | tee proofs/fly/${{ matrix.app }}_machines.json

      - name: Commit service proofs
        run: |
          git config user.name  "sophia-bot"
          git config user.email "sophia-bot@users.noreply.github.com"
          git add proofs/healthz/${{ matrix.app }}.txt proofs/fly/${{ matrix.app }}_machines.json proofs/fly/${{ matrix.app }}_logs.txt 2>/dev/null || true
          git commit -m "[proof] ${{ matrix.app }}: healthz + machines (+ logs if failing)" || true
          git push || true

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [preflight, deploy-dashboard, deploy-services]
    steps:
      - uses: actions/checkout@v4
      - name: Write job summary
        run: |
          echo "## Deploy & Verify Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Dashboard: ${{ env.URL_DASHBOARD }}"     >> $GITHUB_STEP_SUMMARY
          echo "- MCP Repo: ${{ env.URL_MCP_REPO }}"       >> $GITHUB_STEP_SUMMARY
          echo "- MCP Research: ${{ env.URL_MCP_RESEARCH }}" >> $GITHUB_STEP_SUMMARY
          echo "- MCP Context: ${{ env.URL_MCP_CONTEXT }}"   >> $GITHUB_STEP_SUMMARY
          echo "- MCP Business: ${{ env.URL_MCP_BUSINESS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Proofs committed under \`proofs/healthz\`, \`proofs/build\`, \`proofs/fly\`, \`proofs/scans\`." >> $GITHUB_STEP_SUMMARY