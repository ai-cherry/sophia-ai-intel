name: Build & Deploy Containers to Render via Pulumi

on:
  workflow_dispatch:
  push:
    paths:
      - 'apps/dashboard/**'
      - 'services/**'
      - 'ops/pulumi/**'
      - 'DEPLOY_NOW'

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKER: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build Dashboard Container
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub (optional)
        if: ${{ secrets.DOCKER_PAT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}/dashboard
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}/dashboard
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Dashboard container
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./apps/dashboard
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  deploy-via-pulumi:
    name: Deploy to Render via Pulumi
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Pulumi CLI
        uses: pulumi/actions@v4

      - name: Install Python dependencies
        working-directory: ops/pulumi
        run: |
          pip install -r requirements.txt

      - name: Deploy to Staging
        if: github.ref != 'refs/heads/main'
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: sophia-ai-intel/staging
          work-dir: ops/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          RENDER_API_TOKEN: ${{ secrets.RENDER_API_KEY }}
          CONTAINER_IMAGE: ${{ needs.build-and-push.outputs.image-tag }}
          # Database & External Services
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          REDIS_API_KEY: ${{ secrets.REDIS_API_KEY }}
          REDIS_DATABASE_ENDPOINT: ${{ secrets.REDIS_DATABASE_ENDPOINT }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          MEM0_API_KEY: ${{ secrets.MEM0_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          # AI & Business APIs
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HUBSPOT_API_TOKEN: ${{ secrets.HUBSPOT_API_TOKEN }}
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_PRIVATE_KEY: ${{ secrets.GITHUB_PRIVATE_KEY }}

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: sophia-ai-intel/production
          work-dir: ops/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          RENDER_API_TOKEN: ${{ secrets.RENDER_API_KEY }}
          CONTAINER_IMAGE: ${{ needs.build-and-push.outputs.image-tag }}
          # Database & External Services  
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          REDIS_API_KEY: ${{ secrets.REDIS_API_KEY }}
          REDIS_DATABASE_ENDPOINT: ${{ secrets.REDIS_DATABASE_ENDPOINT }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          MEM0_API_KEY: ${{ secrets.MEM0_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          # AI & Business APIs
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HUBSPOT_API_TOKEN: ${{ secrets.HUBSPOT_API_TOKEN }}
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_PRIVATE_KEY: ${{ secrets.GITHUB_PRIVATE_KEY }}

      - name: Create deployment summary
        run: |
          echo "## 🚀 Sophia AI Intel Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Container Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Method**: Pulumi + Docker Containers" >> $GITHUB_STEP_SUMMARY
          echo "**Stack**: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Dashboard: https://sophia-ai-intel.onrender.com" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 API Services: Deploying via Pulumi..." >> $GITHUB_STEP_SUMMARY

  # Fallback deployment option
  fallback-deploy:
    name: Fallback Direct API Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-via-pulumi]
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Execute Direct Render Deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          CONTAINER_IMAGE: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          pip install requests pyyaml
          python scripts/direct_render_deployment.py --container-mode --image="$CONTAINER_IMAGE"

      - name: Report fallback deployment
        run: |
          echo "## ⚠️ Fallback Deployment Used" >> $GITHUB_STEP_SUMMARY
          echo "Pulumi deployment failed, used direct Render API instead." >> $GITHUB_STEP_SUMMARY
