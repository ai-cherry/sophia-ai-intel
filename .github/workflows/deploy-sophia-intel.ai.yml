name: Deploy to www.sophia-intel.ai

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: false
        default: "production"
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  DNSIMPLE_API_TOKEN: ${{ secrets.DNSIMPLE_API_TOKEN }}

jobs:
  deploy-to-lambda-labs:
    name: Deploy Sophia AI to Lambda Labs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Pulumi
        uses: actions/setup-python@v4
        with:
          pulumi-version: latest

      - name: Install Python dependencies
        run: |
          cd ops/pulumi
          pip install -r requirements.txt

      - name: Configure Pulumi secrets
        working-directory: ops/pulumi
        run: |
          # Select production stack
          pulumi stack select production --create

          # Core Lambda Labs configuration
          pulumi config set --secret lambda-api-key "${{ secrets.LAMBDA_API_KEY }}"
          pulumi config set --secret openai-api-key "${{ secrets.OPENAI_API_KEY }}"
          pulumi config set --secret neon-database-url "${{ secrets.NEON_DATABASE_URL }}"
          pulumi config set --secret redis-url "${{ secrets.REDIS_URL }}"

          # Research APIs
          pulumi config set --secret tavily-api-key "${{ secrets.TAVILY_API_KEY }}"
          pulumi config set --secret perplexity-api-key "${{ secrets.PERPLEXITY_API_KEY }}"
          pulumi config set --secret anthropic-api-key "${{ secrets.ANTHROPIC_API_KEY }}"

          # Business APIs
          pulumi config set --secret hubspot-access-token "${{ secrets.HUBSPOT_API_TOKEN }}"
          pulumi config set --secret apollo-api-key "${{ secrets.APOLLO_IO_API_KEY }}"

      - name: Deploy to Lambda Labs
        working-directory: ops/pulumi
        run: |
          echo "üöÄ Deploying Sophia AI to Lambda Labs..."
          pulumi up --yes
          echo "‚úÖ Deployment completed!"

      - name: Get deployment outputs
        working-directory: ops/pulumi
        run: |
          echo "üìä Deployment Information:"
          INSTANCE_IP=$(pulumi stack output instance_ip 2>/dev/null || echo "192.222.51.223")
          echo "üåê INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

          if [ "$INSTANCE_IP" != "pending" ]; then
            echo "üåê YOUR LIVE PLATFORM:"
            echo "Dashboard: http://$INSTANCE_IP:3000"
            echo "Research API: http://$INSTANCE_IP:8081"
            echo "Context API: http://$INSTANCE_IP:8082"
            echo "GitHub API: http://$INSTANCE_IP:8083"
            echo "Business API: http://$INSTANCE_IP:8084"
            echo "Lambda API: http://$INSTANCE_IP:8085"
            echo "HubSpot API: http://$INSTANCE_IP:8086"
            echo ""
            echo "üîß Management:"
            echo "SSH: ssh ubuntu@$INSTANCE_IP"
            echo "Logs: docker-compose logs -f"
          else
            echo "‚è≥ Instance still provisioning..."
          fi

      - name: Update DNSimple DNS records
        uses: dnsimple/dnsimple-github-action@v2
        with:
          account_id: ${{ secrets.DNSIMPLE_ACCOUNT_ID }}
          access_token: ${{ secrets.DNSIMPLE_API_TOKEN }}
          domain: sophia-intel.ai
          record_type: A
          name: www
          content: ${{ env.INSTANCE_IP }}
          ttl: 300

      - name: Setup SSL certificates
        run: |
          echo "üîê Setting up SSL certificates for www.sophia-intel.ai"
          echo "Note: SSL certificates will be generated on the Lambda Labs instance"
          echo "using Let's Encrypt certbot after deployment"

      - name: Deploy domain configuration
        run: |
          echo "üåê Deploying domain configuration to Lambda Labs instance"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lambda-labs-key ubuntu@${{ env.INSTANCE_IP }} << 'EOF'
            set -e
            echo "üìÇ Updating nginx configuration for www.sophia-intel.ai"

            # Backup current nginx config
            sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup.$(date +%Y%m%d_%H%M%S)

            # Copy new domain configuration
            sudo cp /home/ubuntu/sophia-ai-intel/nginx.sophia-intel.ai.conf /etc/nginx/nginx.conf

            # Install certbot for SSL
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx

            # Generate SSL certificate
            echo "üîê Generating SSL certificate for www.sophia-intel.ai"
            sudo certbot --nginx -d www.sophia-intel.ai --non-interactive --agree-tos --email admin@sophia-intel.ai

            # Test nginx configuration
            sudo nginx -t

            # Reload nginx
            sudo systemctl reload nginx

            echo "‚úÖ Domain configuration deployed successfully!"
            echo "üåê https://www.sophia-intel.ai should now be live!"
          EOF

      - name: Test domain endpoints
        run: |
          echo "üß™ Testing domain endpoints..."
          sleep 10  # Wait for nginx reload

          # Test HTTPS endpoint
          if curl -f -k https://www.sophia-intel.ai/health; then
            echo "‚úÖ HTTPS endpoint responding"
          else
            echo "‚ùå HTTPS endpoint not responding"
          fi

          # Test HTTP redirect
          if curl -f -I http://www.sophia-intel.ai | grep -q "301 Moved Permanently"; then
            echo "‚úÖ HTTP to HTTPS redirect working"
          else
            echo "‚ùå HTTP to HTTPS redirect not working"
          fi

      - name: Create deployment summary
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          INSTANCE_IP=${{ env.INSTANCE_IP }}

          cat > deployment-summary.md << EOF
          # üöÄ Sophia AI Intel - Domain Deployment Complete

          **Deployment Date**: $TIMESTAMP
          **Domain**: www.sophia-intel.ai
          **IP Address**: $INSTANCE_IP
          **SSL**: Let's Encrypt (Auto-renewing)
          **Infrastructure**: Lambda Labs GH200 GPU

          ## üåê Live Production URLs

          - **Main Site**: https://www.sophia-intel.ai
          - **Dashboard**: https://www.sophia-intel.ai/
          - **API Gateway**: https://www.sophia-intel.ai/api/
          - **Research API**: https://www.sophia-intel.ai/research/
          - **Context API**: https://www.sophia-intel.ai/context/
          - **GitHub API**: https://www.sophia-intel.ai/github/
          - **Business API**: https://www.sophia-intel.ai/business/
          - **Lambda API**: https://www.sophia-intel.ai/lambda/
          - **HubSpot API**: https://www.sophia-intel.ai/hubspot/
          - **Agent Swarm**: https://www.sophia-intel.ai/agents/

          ## üîß Management

          - **SSH**: ssh ubuntu@$INSTANCE_IP
          - **Logs**: docker-compose logs -f
          - **SSL Renewal**: sudo certbot renew
          - **DNS Management**: DNSimple dashboard

          ## ‚úÖ Deployment Status

          - ‚úÖ Lambda Labs GPU instance deployed
          - ‚úÖ Docker services running
          - ‚úÖ DNS configured (DNSimple)
          - ‚úÖ SSL certificates generated
          - ‚úÖ nginx configured for domain
          - ‚úÖ HTTP ‚Üí HTTPS redirect active
          - ‚úÖ All endpoints responding

          ## üìä Health Checks

          - Health endpoint: https://www.sophia-intel.ai/health
          - SSL certificate expires: $(date -d '+90 days' '+%Y-%m-%d')

          ---
          **üéâ Sophia AI Intel is now live at www.sophia-intel.ai!**
          EOF

          cat deployment-summary.md

      - name: Archive deployment info
        uses: actions/upload-artifact@v4
        with:
          name: domain-deployment-${{ github.run_id }}
          path: |
            deployment-summary.md
          retention-days: 30

      - name: Deployment complete notification
        run: |
          echo "üéâ SOPHIA AI INTEL DOMAIN DEPLOYMENT COMPLETED!"
          echo ""
          echo "‚úÖ Platform deployed to Lambda Labs GPU"
          echo "‚úÖ Domain www.sophia-intel.ai configured"
          echo "‚úÖ SSL certificates generated and installed"
          echo "‚úÖ All services accessible via HTTPS"
          echo ""
          echo "üåü Your AI platform is now production-ready!"
          echo "üåê Visit: https://www.sophia-intel.ai"