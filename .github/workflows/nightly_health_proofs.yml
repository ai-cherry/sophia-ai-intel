name: Nightly Health Proofs Collection

on:
  schedule:
    - cron: '0 6 * * *'  # 6 AM UTC daily
  workflow_dispatch:
    inputs:
      include_cost_analysis:
        description: "Include detailed cost analysis"
        type: boolean
        default: true
      emergency_health_check:
        description: "Emergency health check mode"
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

env:
  # Service URLs for health checks (Render migration)
  DASHBOARD_URL: https://sophia-dashboard.onrender.com
  MCP_REPO_URL: https://sophia-github.onrender.com
  MCP_RESEARCH_URL: https://sophia-research.onrender.com
  MCP_CONTEXT_URL: https://sophia-context.onrender.com
  MCP_BUSINESS_URL: https://sophia-business.onrender.com
  MCP_LAMBDA_URL: https://sophia-lambda.onrender.com
  MCP_HUBSPOT_URL: https://sophia-hubspot.onrender.com
  MCP_ORCHESTRATOR_URL: https://sophia-orchestrator.onrender.com
  JOBS_URL: https://sophia-jobs.onrender.com
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL }}

jobs:
  comprehensive-health-proofs:
    name: Comprehensive Health & Cost Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Render authentication check
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          if [ -z "$RENDER_API_KEY" ]; then
            echo "⚠️ RENDER_API_KEY not available - resource monitoring will be limited"
            echo "RENDER_AUTH_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "✅ Render authentication available"
            echo "RENDER_AUTH_AVAILABLE=true" >> $GITHUB_ENV
          fi

      - name: Comprehensive service health checks
        run: |
          echo "🏥 Running comprehensive nightly health checks..."
          mkdir -p proofs/nightly/health/$(date +%Y-%m-%d)
          
          HEALTH_DATE=$(date +%Y-%m-%d)
          HEALTH_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          declare -A services=(
            ["dashboard"]="${DASHBOARD_URL}"
            ["mcp-github"]="${MCP_REPO_URL}"
            ["mcp-research"]="${MCP_RESEARCH_URL}"
            ["mcp-context"]="${MCP_CONTEXT_URL}"
            ["mcp-business"]="${MCP_BUSINESS_URL}"
            ["mcp-lambda"]="${MCP_LAMBDA_URL}"
            ["mcp-hubspot"]="${MCP_HUBSPOT_URL}"
            ["mcp-orchestrator"]="${MCP_ORCHESTRATOR_URL}"
            ["jobs"]="${JOBS_URL}"
          )
          
          health_summary="{\"timestamp\":\"$HEALTH_TIMESTAMP\",\"date\":\"$HEALTH_DATE\",\"services\":{"
          first=true
          all_healthy=true
          
          for service in "${!services[@]}"; do
            base_url="${services[$service]}"
            
            if [ "$first" = false ]; then
              health_summary="$health_summary,"
            fi
            
            echo "🔍 Checking $service at $base_url"
            
            # Health check with detailed metrics
            health_status="unknown"
            response_time="0"
            http_code="0"
            
            start_time=$(date +%s%3N)
            if response=$(curl -s -w "%{http_code}" -o /tmp/health_response "$base_url/healthz" 2>/dev/null); then
              end_time=$(date +%s%3N)
              response_time=$((end_time - start_time))
              http_code="$response"
              
              if [ "$http_code" = "200" ]; then
                health_status="healthy"
                echo "✅ $service: healthy (${response_time}ms)"
              else
                health_status="unhealthy"
                all_healthy=false
                echo "❌ $service: HTTP $http_code (${response_time}ms)"
              fi
            else
              health_status="unreachable"
              all_healthy=false
              echo "💥 $service: unreachable"
            fi
            
            # Build info check
            build_info=""
            if curl -s "$base_url/__build" > /tmp/build_info 2>/dev/null; then
              build_info=$(cat /tmp/build_info | jq -c . 2>/dev/null || echo "\"unavailable\"")
            else
              build_info="\"unavailable\""
            fi
            
            # Detailed service proof
            cat > "proofs/nightly/health/$HEALTH_DATE/${service}_health.json" <<EOF
          {
            "service": "$service",
            "timestamp": "$HEALTH_TIMESTAMP",
            "url": "$base_url",
            "status": "$health_status",
            "http_code": $http_code,
            "response_time_ms": $response_time,
            "build_info": $build_info,
            "healthz_response": $(cat /tmp/health_response 2>/dev/null | jq -Rs . || echo "\"unavailable\"")
          }
          EOF
            
            health_summary="$health_summary\"$service\":{\"status\":\"$health_status\",\"http_code\":$http_code,\"response_time_ms\":$response_time}"
            first=false
          done
          
          health_summary="$health_summary},\"all_healthy\":$all_healthy}"
          
          # Save comprehensive summary
          echo "$health_summary" | jq . > "proofs/nightly/health/$HEALTH_DATE/summary.json"
          
          echo "HEALTH_ALL_SERVICES_UP=$all_healthy" >> $GITHUB_ENV
          echo "HEALTH_SUMMARY_PATH=proofs/nightly/health/$HEALTH_DATE/summary.json" >> $GITHUB_ENV

      - name: Render service monitoring
        if: ${{ env.RENDER_AUTH_AVAILABLE == 'true' && (inputs.include_cost_analysis != false) }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "💰 Collecting Render service and resource data..."
          mkdir -p proofs/cost/$(date +%Y-%m-%d)
          
          COST_DATE=$(date +%Y-%m-%d)
          COST_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Get all services via Render API
          echo "📊 Scanning Render services..."
          services_response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services" 2>/dev/null || echo '{"services":[]}')
          
          echo "$services_response" | jq . > "proofs/cost/$COST_DATE/services_list.json"
          
          # Process services data
          total_services=0
          total_instances=0
          service_details="[]"
          
          if [ "$(echo "$services_response" | jq '.services | length' 2>/dev/null)" -gt 0 ]; then
            for service_id in $(echo "$services_response" | jq -r '.services[].id' 2>/dev/null); do
              echo "🔍 Analyzing service: $service_id"
              
              # Get service details
              service_detail=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
                "https://api.render.com/v1/services/$service_id" 2>/dev/null || echo '{}')
              
              if [ "$(echo "$service_detail" | jq -r '.id // empty')" != "" ]; then
                service_name=$(echo "$service_detail" | jq -r '.name // "unknown"')
                service_type=$(echo "$service_detail" | jq -r '.type // "unknown"')
                
                total_services=$((total_services + 1))
                total_instances=$((total_instances + 1))  # Render services are typically single instance
                
                service_details=$(echo "$service_details" | jq --argjson service "$service_detail" '. + [$service]')
              fi
            done
          fi
          
          # Create resource summary
          resource_summary=$(cat <<EOF
          {
            "timestamp": "$COST_TIMESTAMP",
            "date": "$COST_DATE",
            "platform": "render",
            "totals": {
              "services": $total_services,
              "instances": $total_instances
            },
            "services": $service_details
          }
          EOF
          )
          
          echo "$resource_summary" | jq . > "proofs/cost/$COST_DATE/usage_$COST_DATE.json"
          
          echo "📊 Resource summary:"
          echo "  Services: $total_services"
          echo "  Instances: $total_instances"
          
          echo "RESOURCE_SERVICE_COUNT=$total_services" >> $GITHUB_ENV
          echo "RESOURCE_INSTANCE_COUNT=$total_instances" >> $GITHUB_ENV

      - name: Historical trend analysis
        run: |
          echo "📈 Analyzing historical trends..."
          mkdir -p proofs/trends
          
          # Analyze health trends over last 7 days
          TREND_DATA="[]"
          for i in {0..6}; do
            check_date=$(date -d "-${i} days" +%Y-%m-%d)
            summary_file="proofs/nightly/health/$check_date/summary.json"
            
            if [ -f "$summary_file" ]; then
              day_data=$(jq --arg date "$check_date" '{date: $date, all_healthy: .all_healthy, service_count: (.services | length)}' "$summary_file" 2>/dev/null || echo "{\"date\":\"$check_date\",\"all_healthy\":false,\"service_count\":0}")
              TREND_DATA=$(echo "$TREND_DATA" | jq ". + [$day_data]")
            fi
          done
          
          # Calculate reliability metrics
          if [ "$(echo "$TREND_DATA" | jq 'length')" -gt 0 ]; then
            healthy_days=$(echo "$TREND_DATA" | jq '[.[] | select(.all_healthy == true)] | length')
            total_days=$(echo "$TREND_DATA" | jq 'length')
            reliability_pct=$(echo "scale=2; $healthy_days * 100 / $total_days" | bc 2>/dev/null || echo "0")
            
            trend_summary=$(cat <<EOF
          {
            "generated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "period": "7_days",
            "metrics": {
              "total_days_analyzed": $total_days,
              "healthy_days": $healthy_days,
              "reliability_percentage": $reliability_pct
            },
            "daily_data": $TREND_DATA
          }
          EOF
            )
            
            echo "$trend_summary" | jq . > proofs/trends/7_day_health_trend.json
            echo "📊 7-day reliability: ${reliability_pct}%"
            
            echo "RELIABILITY_PERCENTAGE=$reliability_pct" >> $GITHUB_ENV
          fi

      - name: Generate alerts for degraded services
        if: ${{ env.HEALTH_ALL_SERVICES_UP == 'false' || inputs.emergency_health_check == true }}
        env:
          WEBHOOK_URL: ${{ env.ALERT_WEBHOOK_URL }}
        run: |
          echo "🚨 Service degradation detected - generating alerts..."
          
          if [ -n "$WEBHOOK_URL" ]; then
            alert_payload=$(cat <<EOF
          {
            "text": "🚨 Sophia AI Health Alert",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Sophia AI Health Alert*\n\n⚠️ Service degradation detected during nightly health check\n\n*Timestamp:* $(date -u)\n*Reliability:* ${RELIABILITY_PERCENTAGE:-"N/A"}%\n*Total Services:* ${RESOURCE_SERVICE_COUNT:-"N/A"}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Action Required:*\n• Review health proofs in \`proofs/nightly/health/\`\n• Check service logs\n• Consider emergency deployment if needed"
                }
              }
            ]
          }
          EOF
          )
            
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "$alert_payload" \
              "$WEBHOOK_URL" || echo "⚠️ Failed to send alert webhook"
          else
            echo "⚠️ ALERT_WEBHOOK_URL not configured - alerts not sent"
          fi

      - name: Commit nightly proofs
        run: |
          git config user.name "sophia-bot"
          git config user.email "sophia-bot@users.noreply.github.com"
          
          # Add all generated proofs
          git add proofs/nightly/ proofs/cost/ proofs/trends/ 2>/dev/null || true
          
          if ! git diff --cached --quiet; then
            commit_msg="[nightly-proofs] Health & cost monitoring $(date +%Y-%m-%d)"
            if [ "${{ env.HEALTH_ALL_SERVICES_UP }}" = "false" ]; then
              commit_msg="$commit_msg - ⚠️ SERVICE DEGRADATION"
            fi
            
            git commit -m "$commit_msg"
            git push origin HEAD:${GITHUB_REF#refs/heads/}
            
            echo "✅ Nightly proofs committed successfully"
          else
            echo "ℹ️ No new proof changes to commit"
          fi

      - name: Upload nightly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nightly-health-proofs-${{ github.run_id }}
          path: |
            proofs/nightly/
            proofs/cost/
            proofs/trends/
          retention-days: 30

      - name: Generate nightly summary report
        run: |
          echo "# 🌙 Nightly Health & Cost Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**All Services Healthy:** ${{ env.HEALTH_ALL_SERVICES_UP }}" >> $GITHUB_STEP_SUMMARY
          echo "**7-Day Reliability:** ${RELIABILITY_PERCENTAGE:-"N/A"}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Resource Usage" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Services:** ${RESOURCE_SERVICE_COUNT:-"N/A"}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Instances:** ${RESOURCE_INSTANCE_COUNT:-"N/A"}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Proof Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Health proofs: \`proofs/nightly/health/$(date +%Y-%m-%d)/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Cost analysis: \`proofs/cost/$(date +%Y-%m-%d)/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Trend analysis: \`proofs/trends/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.HEALTH_ALL_SERVICES_UP }}" = "false" ]; then
            echo "## ⚠️ Action Items" >> $GITHUB_STEP_SUMMARY
            echo "- Review failed services in health proofs" >> $GITHUB_STEP_SUMMARY
            echo "- Check application logs" >> $GITHUB_STEP_SUMMARY
            echo "- Consider triggering emergency deployment" >> $GITHUB_STEP_SUMMARY
          fi
