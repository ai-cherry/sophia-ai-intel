#!/usr/bin/env python3
"""
Sophia AI Synthetic End-to-End Checks

Performs synthetic tests to validate critical business functionality:
- Slack post via comms-mcp
- CRM task create via crm-mcp
- Neon select 1 via analytics-mcp

Used by the CI/CD pipeline to ensure end-to-end functionality before full rollout.
"""

import argparse
import asyncio
import json
import os
import sys
import time
from typing import Dict, List, Optional, Tuple

import aiohttp
import requests


class SyntheticChecker:
    """Performs synthetic end-to-end checks for Sophia AI services."""

    def __init__(self, namespace: str = "sophia"):
        self.namespace = namespace
        self.base_urls = {
            'comms-mcp': f'http://comms-mcp.{namespace}.svc.cluster.local:8080',
            'crm-mcp': f'http://crm-mcp.{namespace}.svc.cluster.local:8080',
            'analytics-mcp': f'http://analytics-mcp.{namespace}.svc.cluster.local:8080'
        }

    async def test_slack_post_via_comms(self, session: aiohttp.ClientSession) -> Dict:
        """Test Slack post functionality via comms-mcp."""
        result = {
            "test": "slack_post",
            "service": "comms-mcp",
            "status": "unknown",
            "response_time": None,
            "error": None,
            "details": {}
        }

        try:
            payload = {
                "channel": "#test-deployments",
                "message": "🤖 Sophia AI Synthetic Test - Deployment Validation",
                "username": "sophia-deployment-bot"
            }

            start_time = time.time()
            async with session.post(
                f"{self.base_urls['comms-mcp']}/slack/post",
                json=payload,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                result["response_time"] = round((time.time() - start_time) * 1000, 2)

                if response.status == 200:
                    try:
                        data = await response.json()
                        if data.get("success") or data.get("status") == "sent":
                            result["status"] = "green"
                            result["details"] = data
                        else:
                            result["status"] = "yellow"
                            result["error"] = f"Slack post returned non-success: {data}"
                    except:
                        result["status"] = "green"  # Assume success if we get 200
                elif response.status >= 500:
                    result["status"] = "red"
                    result["error"] = f"Server error: {response.status}"
                else:
                    result["status"] = "yellow"
                    result["error"] = f"Client error: {response.status}"

        except asyncio.TimeoutError:
            result["status"] = "red"
            result["error"] = "Timeout - Slack service not responding"
        except aiohttp.ClientError as e:
            result["status"] = "red"
            result["error"] = f"Connection error: {str(e)}"
        except Exception as e:
            result["status"] = "red"
            result["error"] = f"Unexpected error: {str(e)}"

        return result

    async def test_crm_task_create_via_crm(self, session: aiohttp.ClientSession) -> Dict:
        """Test CRM task creation via crm-mcp."""
        result = {
            "test": "crm_task",
            "service": "crm-mcp",
            "status": "unknown",
            "response_time": None,
            "error": None,
            "details": {}
        }

        try:
            payload = {
                "subject": "Deployment Validation Task",
                "description": "Automated test task created during CI/CD pipeline validation",
                "priority": "low",
                "assignee": "deployment-bot@sophia-ai.com"
            }

            start_time = time.time()
            async with session.post(
                f"{self.base_urls['crm-mcp']}/tasks/create",
                json=payload,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                result["response_time"] = round((time.time() - start_time) * 1000, 2)

                if response.status == 200:
                    try:
                        data = await response.json()
                        if data.get("success") or data.get("id"):
                            result["status"] = "green"
                            result["details"] = data
                        else:
                            result["status"] = "yellow"
                            result["error"] = f"CRM task creation returned non-success: {data}"
                    except:
                        result["status"] = "green"  # Assume success if we get 200
                elif response.status >= 500:
                    result["status"] = "red"
                    result["error"] = f"Server error: {response.status}"
                else:
                    result["status"] = "yellow"
                    result["error"] = f"Client error: {response.status}"

        except asyncio.TimeoutError:
            result["status"] = "red"
            result["error"] = "Timeout - CRM service not responding"
        except aiohttp.ClientError as e:
            result["status"] = "red"
            result["error"] = f"Connection error: {str(e)}"
        except Exception as e:
            result["status"] = "red"
            result["error"] = f"Unexpected error: {str(e)}"

        return result

    async def test_neon_select_via_analytics(self, session: aiohttp.ClientSession) -> Dict:
        """Test Neon database connectivity via analytics-mcp."""
        result = {
            "test": "neon_select",
            "service": "analytics-mcp",
            "status": "unknown",
            "response_time": None,
            "error": None,
            "details": {}
        }

        try:
            payload = {
                "query": "SELECT 1 as test_value, current_timestamp as test_time",
                "database": "neondb"
            }

            start_time = time.time()
            async with session.post(
                f"{self.base_urls['analytics-mcp']}/query/neon",
                json=payload,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                result["response_time"] = round((time.time() - start_time) * 1000, 2)

                if response.status == 200:
                    try:
                        data = await response.json()
                        if data.get("success") and data.get("rows"):
                            result["status"] = "green"
                            result["details"] = data
                        else:
                            result["status"] = "yellow"
                            result["error"] = f"Neon query returned no data: {data}"
                    except:
                        result["status"] = "green"  # Assume success if we get 200
                elif response.status >= 500:
                    result["status"] = "red"
                    result["error"] = f"Server error: {response.status}"
                else:
                    result["status"] = "yellow"
                    result["error"] = f"Client error: {response.status}"

        except asyncio.TimeoutError:
            result["status"] = "red"
            result["error"] = "Timeout - Analytics service not responding"
        except aiohttp.ClientError as e:
            result["status"] = "red"
            result["error"] = f"Connection error: {str(e)}"
        except Exception as e:
            result["status"] = "red"
            result["error"] = f"Unexpected error: {str(e)}"

        return result

    async def run_all_synthetic_checks(self) -> Tuple[bool, List[Dict]]:
        """Run all synthetic checks and return overall status."""
        print("🧪 Running Sophia AI Synthetic End-to-End Checks")
        print("=" * 60)

        async with aiohttp.ClientSession() as session:
            tasks = [
                self.test_slack_post_via_comms(session),
                self.test_crm_task_create_via_crm(session),
                self.test_neon_select_via_analytics(session)
            ]

            results = await asyncio.gather(*tasks, return_exceptions=True)

        # Process results
        processed_results = []
        overall_success = True
        red_tests = []
        yellow_tests = []

        for result in results:
            if isinstance(result, Exception):
                print(f"❌ Error during synthetic check: {result}")
                overall_success = False
                continue

            processed_results.append(result)

            test_name = result["test"]
            status = result["status"]
            service = result["service"]
            response_time = result.get("response_time", "N/A")

            if status == "red":
                overall_success = False
                red_tests.append(f"{test_name} ({service})")
                print(f"🔴 {test_name} via {service}: FAILED ({response_time}ms)")
                if result.get("error"):
                    print(f"   ❌ {result['error']}")
            elif status == "yellow":
                yellow_tests.append(f"{test_name} ({service})")
                print(f"🟡 {test_name} via {service}: WARNING ({response_time}ms)")
                if result.get("error"):
                    print(f"   ⚠️  {result['error']}")
            else:
                print(f"🟢 {test_name} via {service}: PASSED ({response_time}ms)")

        print("=" * 60)

        if red_tests:
            print(f"🔴 FAILED TESTS ({len(red_tests)}): {', '.join(red_tests)}")
            overall_success = False

        if yellow_tests:
            print(f"🟡 WARNING TESTS ({len(yellow_tests)}): {', '.join(yellow_tests)}")

        if overall_success:
            print("✅ ALL SYNTHETIC CHECKS PASSED - Ready for full rollout!")
        else:
            print("❌ SYNTHETIC CHECKS FAILED - Blocking full rollout")

        return overall_success, processed_results


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Run Sophia AI synthetic checks")
    parser.add_argument("--test", choices=["slack_post", "crm_task", "neon_select"],
                       help="Run specific test")
    parser.add_argument("--service", choices=["comms-mcp", "crm-mcp", "analytics-mcp"],
                       help="Target service for test")
    parser.add_argument("--namespace", "-n", default="sophia", help="Kubernetes namespace")
    parser.add_argument("--output-json", help="Output results to JSON file")

    args = parser.parse_args()

    checker = SyntheticChecker(namespace=args.namespace)

    async def run_checks():
        if args.test and args.service:
            # Run specific test
            async with aiohttp.ClientSession() as session:
                if args.test == "slack_post" and args.service == "comms-mcp":
                    result = await checker.test_slack_post_via_comms(session)
                elif args.test == "crm_task" and args.service == "crm-mcp":
                    result = await checker.test_crm_task_create_via_crm(session)
                elif args.test == "neon_select" and args.service == "analytics-mcp":
                    result = await checker.test_neon_select_via_analytics(session)
                else:
                    print(f"❌ Invalid test/service combination: {args.test} on {args.service}")
                    return False

                success = result["status"] == "green"
                print(f"Test result: {'PASSED' if success else 'FAILED'}")

                if args.output_json:
                    with open(args.output_json, 'w') as f:
                        json.dump(result, f, indent=2)

                return success
        else:
            # Run all tests
            success, results = await checker.run_all_synthetic_checks()

            if args.output_json:
                with open(args.output_json, 'w') as f:
                    json.dump({
                        "overall_success": success,
                        "timestamp": time.time(),
                        "results": results
                    }, f, indent=2)

            return success

    success = asyncio.run(run_checks())

    if not success:
        print("\n💥 SYNTHETIC CHECKS FAILED: Exiting with code 1")
        sys.exit(1)
    else:
        print("\n🎉 SYNTHETIC CHECKS PASSED: All systems operational")


if __name__ == "__main__":
    main()