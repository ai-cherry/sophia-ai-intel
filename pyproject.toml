[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sophia-ai-intel"
version = "1.0.0"
description = "Sophia AI Intelligence Platform"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "qdrant-client>=1.7.0",
    "openai>=1.3.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "jinja2>=3.1.2",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Additional rule categories that make sense for this project:
# - `W` for pycodestyle warnings
# - `I` for isort import sorting
# - `N` for pep8-naming
# - `UP` for pyupgrade (Python version compatibility)
# - `B` for flake8-bugbear (common bugs)
# - `A` for flake8-builtins (builtin shadowing)
# - `C4` for flake8-comprehensions
# - `T20` for flake8-print (no print statements in production)
# - `SIM` for flake8-simplify
# - `PIE` for flake8-pie
# - `RET` for flake8-return
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "PIE", # flake8-pie
    "RET", # flake8-return
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "COM", # flake8-commas
    "C90", # McCabe complexity
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "SLF", # flake8-self
    "SLOT",# flake8-slots
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF",# Perflint
    "FURB",# refurb
    "LOG", # flake8-logging
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements in scripts
    "T20",
    # Allow TODO comments
    "TD002", "TD003", "FIX002",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Scripts can print and have different requirements
"scripts/**/*" = ["T20", "INP001", "PTH100", "PTH101", "PTH102", "PTH103", "PTH104", "PTH105", "PTH106", "PTH107", "PTH108", "PTH109", "PTH110", "PTH111", "PTH112", "PTH113", "PTH114", "PTH115", "PTH116", "PTH117", "PTH118", "PTH119", "PTH120", "PTH121", "PTH122", "PTH123"]
# Configuration files can have different requirements
"ops/**/*" = ["INP001", "PTH100", "PTH101", "PTH102", "PTH103", "PTH104", "PTH105", "PTH106", "PTH107", "PTH108", "PTH109", "PTH110", "PTH111", "PTH112", "PTH113", "PTH114", "PTH115", "PTH116", "PTH117", "PTH118", "PTH119", "PTH120", "PTH121", "PTH122", "PTH123"]
# Documentation can have different requirements
"docs/**/*" = ["INP001"]

[tool.ruff.lint.isort]
known-first-party = ["sophia_ai_intel"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.flake8-import-conventions]
# The conventional import aliases for the specified modules.
[tool.ruff.lint.flake8-import-conventions.aliases]
"matplotlib.pyplot" = "plt"
"numpy" = "np"
"pandas" = "pd"
"scipy.sparse" = "sp"
"scipy.spatial.distance" = "spatial_distance"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Indent with spaces, rather than tabs.
indent-style = "space"

# Respect magic trailing commas.
skip-magic-trailing-comma = false

# Use single quotes for strings in docstrings
docstring-code-format = true

# Automatically detect the appropriate line ending.
line-ending = "auto"