"use strict";(()=>{var e={};e.id=744,e.ids=[744],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8385:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>g,patchFetch:()=>w,requestAsyncStorage:()=>u,routeModule:()=>d,serverHooks:()=>y,staticGenerationAsyncStorage:()=>m});var s={};a.r(s),a.d(s,{POST:()=>h});var n=a(3036),r=a(5736),o=a(5262),i=a(942);async function c(e,t,a){let s={};switch(e){case"research":let n=!1;try{let e=await fetch("http://localhost:8085/research",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:t}),signal:AbortSignal.timeout(3e3)});if(e.ok){let t=await e.json();s.research=t.results||[{status:"completed",data:t}],s.actions=[{type:"research.mcp",status:"completed"}],n=!0}}catch(e){console.log("MCP research unavailable, trying swarm...")}if(!n)try{let e=await fetch("http://localhost:8100/swarms/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({swarm_type:"research",task:t,context:{enable_websocket:!0}})});if(e.ok){let t=await e.json();s.actions=[{type:"research.swarm",swarm_id:t.swarm_id}],s.research=[{status:"running",message:"Deep web research swarm deployed"}],n=!0}}catch(e){console.error("Research swarm error:",e)}if(!n)try{let e=await fetch("http://localhost:8200/chat",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:t,agent_type:"research"})});if(e.ok){let t=await e.json();s.research=[{status:"completed",data:t.response}],s.actions=[{type:"research.direct",task_id:t.task_id}]}}catch(e){s.research=[{status:"error",message:"All research services unavailable"}]}break;case"agents":let r=!1;try{let e=await fetch("http://localhost:8088/deploy",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({task:t,config:{enable_memory:!0,enable_websocket:!0,models:["gpt-4-turbo-preview","claude-3-opus"]}}),signal:AbortSignal.timeout(5e3)});if(e.ok){let t=await e.json();s.actions=[{type:"agent.executor",swarm_id:t.swarm_id}],s.events=[{type:"swarm_deployed",id:t.swarm_id,agents:t.agents}],r=!0}}catch(e){console.log("Real swarm executor unavailable, trying unified swarm...")}if(!r)try{let e=await fetch("http://localhost:8100/swarms/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({swarm_type:"analysis",task:t,context:{enable_websocket:!0}})});if(e.ok){let t=await e.json();s.actions=[{type:"agent.unified",swarm_id:t.swarm_id}],s.events=[{type:"swarm_created",id:t.swarm_id}],r=!0}}catch(e){console.error("Unified swarm error:",e)}if(r&&s.events&&s.events[0])try{await fetch("http://localhost:8096/notify",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"swarm.deployed",data:s.events[0]})})}catch(e){console.log("WebSocket notification failed")}break;case"planning":try{let e=await fetch("http://localhost:8100/plans",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({task:t})});if(e.ok){let t=await e.json();s.plans=t.plans,s.actions=[{type:"plans.generated",count:3}]}}catch(e){console.error("Planning error:",e)}break;case"code":try{let e=await fetch("http://localhost:8100/swarms/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({swarm_type:"coding",task:t,context:{}})});if(e.ok){let t=await e.json();s.actions=[{type:"code.generating",swarm_id:t.swarm_id}],s.code={status:"generating",language:"python"}}}catch(e){console.error("Code generation error:",e)}break;case"swarm-of-swarms":try{let e=await fetch("http://localhost:8100/plans",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({task:t})});if(e.ok){let a=await e.json();await fetch("http://localhost:8100/swarms/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({swarm_type:"research",task:`Research requirements for: ${t}`,context:{strategy:a.plans}})});let n=await fetch("http://localhost:8100/swarms/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({swarm_type:"planning",task:`Create implementation plan for: ${t}`,context:{strategy:a.plans}})});await fetch("http://localhost:8100/swarms/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({swarm_type:"coding",task:t,context:{plan:n.ok?await n.json():null}})}),s.actions=[{type:"swarm-of-swarms.initiated",stages:6},{type:"strategy.completed"},{type:"research.started"},{type:"planning.started"},{type:"coding.started"}],s.events=[{type:"pipeline.started",task:t,stages:["strategy","research","planning","coding","qc","deploy"]}],s.summary="Full development pipeline initiated. All 6 stages are now executing."}}catch(e){console.error("Swarm-of-swarms error:",e),s.summary="Pipeline initialization failed, falling back to individual services"}break;case"github":try{let e=t.includes("commit"),n=t.includes("pr")||t.includes("pull request"),r=t.includes("push");if(e||n||r){let r=await fetch("http://localhost:8082/github/operation",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({operation:e?"commit":n?"create_pr":"push",message:t,context:a})});if(r.ok){let e=await r.json();s.github={status:"completed",operation:e.operation,result:e.result},s.actions=[{type:`github.${e.operation}`,status:"completed"}]}}else s.github={status:"analyzing",message:"Analyzing GitHub request..."},s.actions=[{type:"github.query",status:"processing"}]}catch(e){console.error("GitHub operation error:",e),s.github={status:"error",message:"GitHub service unavailable"}}break;case"health":let o=await l();s.actions=[{type:"health.checked",services:o.length}],s.summary=`${o.filter(e=>"healthy"===e.status).length}/${o.length} services healthy`;break;default:s.summary="Processing your request..."}return s}async function l(){return await Promise.all([{name:"unified-swarm",url:"http://localhost:8100/health"},{name:"mcp-context",url:"http://localhost:8081/healthz"},{name:"mcp-github",url:"http://localhost:8082/health"},{name:"mcp-research",url:"http://localhost:8085/health"}].map(async e=>{try{let t=await fetch(e.url,{signal:AbortSignal.timeout(1e3)});return{...e,status:t.ok?"healthy":"unhealthy",latency:0}}catch{return{...e,status:"dead",latency:-1}}}))}async function p(e){try{let t=await e.json(),a=t.messages||[{content:t.message||""}],s=a[a.length-1]?.content||"",n=t.context||{},r=function(e){let t=e.toLowerCase();return(t.includes("build")||t.includes("create")||t.includes("implement"))&&(t.includes("feature")||t.includes("app")||t.includes("system"))?"swarm-of-swarms":t.includes("research")||t.includes("search")||t.includes("find")?"research":t.includes("deploy")||t.includes("agent")||t.includes("swarm")?"agents":t.includes("code")||t.includes("generate")||t.includes("implement")?"code":t.includes("plan")||t.includes("strategy")||t.includes("design")?"planning":t.includes("commit")||t.includes("push")||t.includes("github")||t.includes("pr")||t.includes("pull request")||t.includes("merge")?"github":t.includes("health")||t.includes("status")||t.includes("broken")?"health":t.includes("analyze")||t.includes("review")||t.includes("repository")?"analysis":"general"}(s),o=await c(r,s,n),l={sections:{summary:o.summary||`I'm processing your ${r} request...`,actions:o.actions||[],research:o.research||[],plans:o.plans||null,code:o.code||null,github:o.github||null,events:o.events||[]},metadata:{intent:r,timestamp:new Date().toISOString(),sessionId:n?.sessionId||`session_${Date.now()}`}};return i.NextResponse.json(l)}catch(e){return console.error("Chat API Error:",e),i.NextResponse.json({sections:{summary:"Error processing request",actions:[],error:e instanceof Error?e.message:"Unknown error"}},{status:500})}}async function h(e){return p(e)}let d=new n.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/chat/route",pathname:"/api/chat",filename:"route",bundlePath:"app/api/chat/route"},resolvedPagePath:"/Users/lynnmusil/sophia-ai-intel-1/apps/sophia-dashboard/src/app/api/chat/route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:u,staticGenerationAsyncStorage:m,serverHooks:y}=d,g="/api/chat/route";function w(){return(0,o.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:m})}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[522,746],()=>a(8385));module.exports=s})();