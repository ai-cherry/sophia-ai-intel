"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/../../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_lynnmusil_sophia_ai_intel_1_apps_sophia_dashboard_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/chat/route.ts */ \"(rsc)/./app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/Users/lynnmusil/sophia-ai-intel-1/apps/sophia-dashboard/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_lynnmusil_sophia_ai_intel_1_apps_sophia_dashboard_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZseW5ubXVzaWwlMkZzb3BoaWEtYWktaW50ZWwtMSUyRmFwcHMlMkZzb3BoaWEtZGFzaGJvYXJkJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmx5bm5tdXNpbCUyRnNvcGhpYS1haS1pbnRlbC0xJTJGYXBwcyUyRnNvcGhpYS1kYXNoYm9hcmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM4QjtBQUMzRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvcGhpYS1kYXNoYm9hcmQvPzY0MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2x5bm5tdXNpbC9zb3BoaWEtYWktaW50ZWwtMS9hcHBzL3NvcGhpYS1kYXNoYm9hcmQvYXBwL2FwaS9jaGF0L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcInN0YW5kYWxvbmVcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hhdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NoYXRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NoYXQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvbHlubm11c2lsL3NvcGhpYS1haS1pbnRlbC0xL2FwcHMvc29waGlhLWRhc2hib2FyZC9hcHAvYXBpL2NoYXQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2NoYXQvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/chat/route.ts":
/*!*******************************!*\
  !*** ./app/api/chat/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   HEAD: () => (/* binding */ HEAD),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n/**\n * SOPHIA COMPLETE - One File, One Truth\n * Everything in one place. No bullshit.\n */ \n// API Provider Configuration\nconst API_KEYS = {\n    perplexity: process.env.PERPLEXITY_API_KEY || \"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\",\n    tavily: process.env.TAVILY_API_KEY || \"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\",\n    serper: process.env.SERPER_API_KEY || \"7b616d4bf53e98d9169e89c25d6f4bf4389a9ed5\",\n    openrouter: process.env.OPENROUTER_API_KEY || \"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\",\n    brave: process.env.BRAVE_API_KEY || \"BSApz0194z7SG6DplmVozl7ttFOi0Eo\",\n    openai: process.env.OPENAI_API_KEY,\n    anthropic: process.env.ANTHROPIC_API_KEY\n};\n// In-memory session storage (replace with Redis in production)\nconst sessions = new Map();\nclass SophiaCore {\n    /**\n   * Classify query intent and complexity\n   */ classifyQuery(query) {\n        const q = query.toLowerCase();\n        // Determine query type\n        let type = \"general\";\n        if (/\\b(code|github|repo|library|npm|pip|framework|api)\\b/i.test(q)) type = \"code\";\n        else if (/\\b(search|find|research|latest|news|current)\\b/.test(q)) type = \"research\";\n        else if (/\\b(who|what|when|where|why|how|explain)\\b/.test(q)) type = \"knowledge\";\n        else if (/\\b(build|create|implement|design|plan)\\b/.test(q)) type = \"planning\";\n        else if (/\\b(analyze|compare|evaluate|assess)\\b/.test(q)) type = \"analysis\";\n        // Determine complexity and whether to use enterprise orchestrator\n        let complexity = \"simple\";\n        let useEnterprise = false;\n        if (/\\b(strategic|critical|urgent|executive|business)\\b/.test(q)) {\n            complexity = \"critical\";\n            useEnterprise = true;\n        } else if (/\\b(complex|multi-step|detailed|comprehensive)\\b/.test(q)) {\n            complexity = \"complex\";\n            useEnterprise = true;\n        } else if (/\\b(analyze|evaluate|compare|investigate)\\b/.test(q)) {\n            complexity = \"moderate\";\n            useEnterprise = /\\b(business|finance|strategy|operations)\\b/.test(q);\n        }\n        return {\n            type,\n            complexity,\n            useEnterprise\n        };\n    }\n    /**\n   * Call Perplexity for research\n   */ async callPerplexity(query) {\n        if (!API_KEYS.perplexity) return null;\n        try {\n            const response = await fetch(\"https://api.perplexity.ai/chat/completions\", {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${API_KEYS.perplexity}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    model: \"llama-3.1-sonar-small-128k-online\",\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: query\n                        }\n                    ]\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                return data.choices?.[0]?.message?.content || null;\n            }\n        } catch (e) {\n            console.error(\"Perplexity error:\", e);\n        }\n        return null;\n    }\n    /**\n   * Call Tavily for web search\n   */ async callTavily(query) {\n        if (!API_KEYS.tavily) return null;\n        try {\n            const response = await fetch(\"https://api.tavily.com/search\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    api_key: API_KEYS.tavily,\n                    query: query,\n                    search_depth: \"advanced\",\n                    max_results: 3\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.answer || data.results) {\n                    let result = data.answer || \"\";\n                    if (data.results?.length) {\n                        result += \"\\n\\nSources:\\n\" + data.results.slice(0, 3).map((r)=>`- ${r.title}: ${r.url}`).join(\"\\n\");\n                    }\n                    return result;\n                }\n            }\n        } catch (e) {\n            console.error(\"Tavily error:\", e);\n        }\n        return null;\n    }\n    /**\n   * Call Serper for Google search\n   */ async callSerper(query) {\n        if (!API_KEYS.serper) return null;\n        try {\n            const response = await fetch(\"https://google.serper.dev/search\", {\n                method: \"POST\",\n                headers: {\n                    \"X-API-KEY\": API_KEYS.serper,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    q: query,\n                    num: 5\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.organic?.length) {\n                    let result = \"Search Results:\\n\";\n                    data.organic.slice(0, 5).forEach((item)=>{\n                        result += `• ${item.title}\\n  ${item.snippet}\\n  ${item.link}\\n\\n`;\n                    });\n                    return result;\n                }\n            }\n        } catch (e) {\n            console.error(\"Serper error:\", e);\n        }\n        return null;\n    }\n    /**\n   * Call OpenRouter for LLM access\n   */ async callOpenRouter(query, model = \"anthropic/claude-3-haiku\") {\n        if (!API_KEYS.openrouter) return null;\n        try {\n            const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${API_KEYS.openrouter}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    model: model,\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: query\n                        }\n                    ]\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                return data.choices?.[0]?.message?.content || null;\n            }\n        } catch (e) {\n            console.error(\"OpenRouter error:\", e);\n        }\n        return null;\n    }\n    /**\n   * Call local MCP services\n   */ async callMCP(query, type) {\n        try {\n            // Try MCP Research for GitHub/code queries\n            if (type === \"code\" || /\\b(github|repository)\\b/i.test(query)) {\n                const response = await fetch(`http://localhost:8085/search/github?q=${encodeURIComponent(query)}&limit=3`);\n                if (response.ok) {\n                    const data = await response.json();\n                    if (data.results?.length) {\n                        return data.results.map((r)=>`📦 ${r.title}\\n  ${r.summary}\\n  ⭐ ${r.metadata?.stars || 0} | ${r.url}`).join(\"\\n\\n\");\n                    }\n                }\n            }\n            // Try general research\n            const researchResponse = await fetch(\"http://localhost:8085/research\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    query,\n                    max_results: 3\n                })\n            });\n            if (researchResponse.ok) {\n                const data = await researchResponse.json();\n                if (data.results?.length) {\n                    return data.results.map((r)=>`- ${r.title}: ${r.summary}`).join(\"\\n\");\n                }\n            }\n        } catch (e) {\n        // MCP not available\n        }\n        return null;\n    }\n    /**\n   * Call Enterprise Orchestrator for complex queries\n   */ async callEnterpriseOrchestrator(query, sessionId) {\n        try {\n            const response = await fetch(\"http://localhost:8300/orchestrate\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    message: query,\n                    session_id: sessionId,\n                    context: {},\n                    max_latency_ms: 5000,\n                    max_cost: 0.10\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                return `${data.response}\\n\\n📊 **Enterprise Intelligence**\\n• Model: ${data.metadata.model}\\n• Complexity: ${data.metadata.complexity}\\n• Domain: ${data.metadata.domain}`;\n            }\n        } catch (e) {\n            console.error(\"Enterprise orchestrator error:\", e);\n        }\n        return null;\n    }\n    /**\n   * Generate response using best available provider\n   */ async generateResponse(query, sessionId) {\n        const classification = this.classifyQuery(query);\n        let response = null;\n        let provider = \"none\";\n        // Use enterprise orchestrator for complex/business queries\n        if (classification.useEnterprise) {\n            response = await this.callEnterpriseOrchestrator(query, sessionId);\n            if (response) {\n                provider = \"enterprise-orchestrator\";\n                return {\n                    response,\n                    provider,\n                    metadata: {\n                        ...classification,\n                        sessionId,\n                        timestamp: new Date().toISOString()\n                    }\n                };\n            }\n        }\n        // Try providers based on query type\n        if (classification.type === \"research\" || classification.type === \"knowledge\") {\n            // Try Serper first for research (Google search)\n            response = await this.callSerper(query);\n            if (response) provider = \"serper\";\n            // Fallback to Perplexity\n            if (!response) {\n                response = await this.callPerplexity(query);\n                if (response) provider = \"perplexity\";\n            }\n            // Fallback to Tavily\n            if (!response) {\n                response = await this.callTavily(query);\n                if (response) provider = \"tavily\";\n            }\n        }\n        if (classification.type === \"code\") {\n            // Try MCP for code searches\n            response = await this.callMCP(query, \"code\");\n            if (response) provider = \"mcp-github\";\n            // Fallback to Tavily\n            if (!response) {\n                response = await this.callTavily(`${query} github repository`);\n                if (response) provider = \"tavily\";\n            }\n        }\n        // For other types or if above failed, try OpenRouter\n        if (!response && classification.type !== \"code\") {\n            response = await this.callOpenRouter(query);\n            if (response) provider = \"openrouter\";\n        }\n        // Final fallback to MCP\n        if (!response) {\n            response = await this.callMCP(query, \"general\");\n            if (response) provider = \"mcp-research\";\n        }\n        // Ultimate fallback\n        if (!response) {\n            response = this.getFallbackResponse(query, classification.type);\n            provider = \"fallback\";\n        }\n        return {\n            response,\n            provider,\n            metadata: {\n                ...classification,\n                sessionId,\n                timestamp: new Date().toISOString()\n            }\n        };\n    }\n    /**\n   * Fallback responses when no API available\n   */ getFallbackResponse(query, queryType) {\n        const responses = {\n            code: `I understand you're looking for code related to \"${query}\". Try searching GitHub directly or check npm/PyPI for packages.`,\n            research: `I'd research \"${query}\" for you, but external services are unavailable. Check recent sources directly.`,\n            knowledge: `Regarding \"${query}\": I can provide general information, though real-time data needs active APIs.`,\n            planning: `I'll help you plan \"${query}\" using architectural best practices and proven patterns.`,\n            analysis: `For analyzing \"${query}\", I'll use my built-in knowledge since external services are unavailable.`,\n            general: `Processing your request about \"${query}\". External services are limited but I'll do my best.`\n        };\n        return responses[queryType] || `I received: \"${query}\". How can I help you today?`;\n    }\n}\n// Initialize Sophia\nconst sophia = new SophiaCore();\n/**\n * Main chat endpoint\n */ async function POST(request) {\n    try {\n        const body = await request.json();\n        const { message, sessionId = \"default\", context = {} } = body;\n        if (!message) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Message required\"\n            }, {\n                status: 400\n            });\n        }\n        // Get or create session\n        if (!sessions.has(sessionId)) {\n            sessions.set(sessionId, []);\n        }\n        const conversation = sessions.get(sessionId);\n        // Add user message\n        conversation.push({\n            role: \"user\",\n            content: message,\n            timestamp: new Date().toISOString()\n        });\n        // Generate response\n        const result = await sophia.generateResponse(message, sessionId);\n        // Add assistant response\n        conversation.push({\n            role: \"assistant\",\n            content: result.response,\n            timestamp: new Date().toISOString(),\n            metadata: result.metadata\n        });\n        // Keep only last 20 messages per session\n        if (conversation.length > 20) {\n            conversation.splice(0, conversation.length - 20);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: result.response,\n            sessionId,\n            provider: result.provider,\n            metadata: result.metadata,\n            conversationLength: conversation.length\n        });\n    } catch (error) {\n        console.error(\"Chat error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * Get conversation history\n */ async function GET(request) {\n    const { searchParams } = new URL(request.url);\n    const sessionId = searchParams.get(\"sessionId\") || \"default\";\n    const conversation = sessions.get(sessionId) || [];\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        sessionId,\n        messages: conversation,\n        total: conversation.length\n    });\n}\n/**\n * Health check\n */ async function HEAD() {\n    return new Response(null, {\n        status: 200\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/chat/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();