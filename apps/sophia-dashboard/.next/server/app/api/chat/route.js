"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/../../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_lynnmusil_sophia_ai_intel_1_apps_sophia_dashboard_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/Users/lynnmusil/sophia-ai-intel-1/apps/sophia-dashboard/src/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_lynnmusil_sophia_ai_intel_1_apps_sophia_dashboard_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZseW5ubXVzaWwlMkZzb3BoaWEtYWktaW50ZWwtMSUyRmFwcHMlMkZzb3BoaWEtZGFzaGJvYXJkJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmx5bm5tdXNpbCUyRnNvcGhpYS1haS1pbnRlbC0xJTJGYXBwcyUyRnNvcGhpYS1kYXNoYm9hcmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNrQztBQUMvRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvcGhpYS1kYXNoYm9hcmQvP2YwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2x5bm5tdXNpbC9zb3BoaWEtYWktaW50ZWwtMS9hcHBzL3NvcGhpYS1kYXNoYm9hcmQvc3JjL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jaGF0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2x5bm5tdXNpbC9zb3BoaWEtYWktaW50ZWwtMS9hcHBzL3NvcGhpYS1kYXNoYm9hcmQvc3JjL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2hhdC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _unified_route__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unified-route */ \"(rsc)/./src/app/api/chat/unified-route.ts\");\n// Import unified handler\n\nasync function POST(request) {\n    // Use unified chat handler for ONE FUCKING CHAT BOX\n    return (0,_unified_route__WEBPACK_IMPORTED_MODULE_0__.POST)(request);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9jaGF0L3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRUEseUJBQXlCO0FBQzZCO0FBRS9DLGVBQWVBLEtBQUtFLE9BQWdCO0lBQ3pDLG9EQUFvRDtJQUNwRCxPQUFPRCxvREFBV0EsQ0FBQ0M7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb3BoaWEtZGFzaGJvYXJkLy4vc3JjL2FwcC9hcGkvY2hhdC9yb3V0ZS50cz80NmI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcblxuLy8gSW1wb3J0IHVuaWZpZWQgaGFuZGxlclxuaW1wb3J0IHsgUE9TVCBhcyB1bmlmaWVkUG9zdCB9IGZyb20gJy4vdW5pZmllZC1yb3V0ZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgLy8gVXNlIHVuaWZpZWQgY2hhdCBoYW5kbGVyIGZvciBPTkUgRlVDS0lORyBDSEFUIEJPWFxuICByZXR1cm4gdW5pZmllZFBvc3QocmVxdWVzdCk7XG59XG4iXSwibmFtZXMiOlsiUE9TVCIsInVuaWZpZWRQb3N0IiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/unified-route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/chat/unified-route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n/**\n * UNIFIED CHAT API - ONE FUCKING CHAT BOX\n * All requests go through Sophia, she routes internally\n */ \n// Intent detection - what does the user want?\nfunction detectIntent(message) {\n    const msg = message.toLowerCase();\n    // Check for complex multi-stage requests (swarm-of-swarms)\n    if ((msg.includes(\"build\") || msg.includes(\"create\") || msg.includes(\"implement\")) && (msg.includes(\"feature\") || msg.includes(\"app\") || msg.includes(\"system\"))) {\n        return \"swarm-of-swarms\";\n    }\n    if (msg.includes(\"research\") || msg.includes(\"search\") || msg.includes(\"find\")) {\n        return \"research\";\n    }\n    if (msg.includes(\"deploy\") || msg.includes(\"agent\") || msg.includes(\"swarm\")) {\n        return \"agents\";\n    }\n    if (msg.includes(\"code\") || msg.includes(\"generate\") || msg.includes(\"implement\")) {\n        return \"code\";\n    }\n    if (msg.includes(\"plan\") || msg.includes(\"strategy\") || msg.includes(\"design\")) {\n        return \"planning\";\n    }\n    if (msg.includes(\"commit\") || msg.includes(\"push\") || msg.includes(\"github\") || msg.includes(\"pr\") || msg.includes(\"pull request\") || msg.includes(\"merge\")) {\n        return \"github\";\n    }\n    if (msg.includes(\"health\") || msg.includes(\"status\") || msg.includes(\"broken\")) {\n        return \"health\";\n    }\n    if (msg.includes(\"analyze\") || msg.includes(\"review\") || msg.includes(\"repository\")) {\n        return \"analysis\";\n    }\n    return \"general\";\n}\n// Route to appropriate service based on intent\nasync function routeToService(intent, message, context) {\n    const sections = {};\n    switch(intent){\n        case \"research\":\n            // Try multiple research services in priority order\n            let researchHandled = false;\n            // 1. Try MCP Research service first\n            try {\n                const mcpRes = await fetch(\"http://localhost:8085/research\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        query: message\n                    }),\n                    signal: AbortSignal.timeout(3000)\n                });\n                if (mcpRes.ok) {\n                    const data = await mcpRes.json();\n                    sections.research = data.results || [\n                        {\n                            status: \"completed\",\n                            data: data\n                        }\n                    ];\n                    sections.actions = [\n                        {\n                            type: \"research.mcp\",\n                            status: \"completed\"\n                        }\n                    ];\n                    researchHandled = true;\n                }\n            } catch (e) {\n                console.log(\"MCP research unavailable, trying swarm...\");\n            }\n            // 2. Fallback to research swarm\n            if (!researchHandled) {\n                try {\n                    const res = await fetch(\"http://localhost:8100/swarms/create\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            swarm_type: \"research\",\n                            task: message,\n                            context: {\n                                enable_websocket: true\n                            }\n                        })\n                    });\n                    if (res.ok) {\n                        const data = await res.json();\n                        sections.actions = [\n                            {\n                                type: \"research.swarm\",\n                                swarm_id: data.swarm_id\n                            }\n                        ];\n                        sections.research = [\n                            {\n                                status: \"running\",\n                                message: \"Deep web research swarm deployed\"\n                            }\n                        ];\n                        researchHandled = true;\n                    }\n                } catch (e) {\n                    console.error(\"Research swarm error:\", e);\n                }\n            }\n            // 3. Final fallback to direct swarm API\n            if (!researchHandled) {\n                try {\n                    const directRes = await fetch(\"http://localhost:8200/chat\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            message: message,\n                            agent_type: \"research\"\n                        })\n                    });\n                    if (directRes.ok) {\n                        const data = await directRes.json();\n                        sections.research = [\n                            {\n                                status: \"completed\",\n                                data: data.response\n                            }\n                        ];\n                        sections.actions = [\n                            {\n                                type: \"research.direct\",\n                                task_id: data.task_id\n                            }\n                        ];\n                    }\n                } catch (e) {\n                    sections.research = [\n                        {\n                            status: \"error\",\n                            message: \"All research services unavailable\"\n                        }\n                    ];\n                }\n            }\n            break;\n        case \"agents\":\n            // Deploy/manage agents with real swarm executor\n            let agentHandled = false;\n            // 1. Try real swarm executor first\n            try {\n                const executorRes = await fetch(\"http://localhost:8088/deploy\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        task: message,\n                        config: {\n                            enable_memory: true,\n                            enable_websocket: true,\n                            models: [\n                                \"gpt-4-turbo-preview\",\n                                \"claude-3-opus\"\n                            ]\n                        }\n                    }),\n                    signal: AbortSignal.timeout(5000)\n                });\n                if (executorRes.ok) {\n                    const data = await executorRes.json();\n                    sections.actions = [\n                        {\n                            type: \"agent.executor\",\n                            swarm_id: data.swarm_id\n                        }\n                    ];\n                    sections.events = [\n                        {\n                            type: \"swarm_deployed\",\n                            id: data.swarm_id,\n                            agents: data.agents\n                        }\n                    ];\n                    agentHandled = true;\n                }\n            } catch (e) {\n                console.log(\"Real swarm executor unavailable, trying unified swarm...\");\n            }\n            // 2. Fallback to unified swarm service\n            if (!agentHandled) {\n                try {\n                    const res = await fetch(\"http://localhost:8100/swarms/create\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            swarm_type: \"analysis\",\n                            task: message,\n                            context: {\n                                enable_websocket: true\n                            }\n                        })\n                    });\n                    if (res.ok) {\n                        const data = await res.json();\n                        sections.actions = [\n                            {\n                                type: \"agent.unified\",\n                                swarm_id: data.swarm_id\n                            }\n                        ];\n                        sections.events = [\n                            {\n                                type: \"swarm_created\",\n                                id: data.swarm_id\n                            }\n                        ];\n                        agentHandled = true;\n                    }\n                } catch (e) {\n                    console.error(\"Unified swarm error:\", e);\n                }\n            }\n            // 3. WebSocket notification for real-time updates\n            if (agentHandled && sections.events && sections.events[0]) {\n                try {\n                    await fetch(\"http://localhost:8096/notify\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            type: \"swarm.deployed\",\n                            data: sections.events[0]\n                        })\n                    });\n                } catch (e) {\n                    console.log(\"WebSocket notification failed\");\n                }\n            }\n            break;\n        case \"planning\":\n            // Generate plans\n            try {\n                const res = await fetch(\"http://localhost:8100/plans\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        task: message\n                    })\n                });\n                if (res.ok) {\n                    const data = await res.json();\n                    sections.plans = data.plans;\n                    sections.actions = [\n                        {\n                            type: \"plans.generated\",\n                            count: 3\n                        }\n                    ];\n                }\n            } catch (e) {\n                console.error(\"Planning error:\", e);\n            }\n            break;\n        case \"code\":\n            // Generate code\n            try {\n                const res = await fetch(\"http://localhost:8100/swarms/create\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        swarm_type: \"coding\",\n                        task: message,\n                        context: {}\n                    })\n                });\n                if (res.ok) {\n                    const data = await res.json();\n                    sections.actions = [\n                        {\n                            type: \"code.generating\",\n                            swarm_id: data.swarm_id\n                        }\n                    ];\n                    sections.code = {\n                        status: \"generating\",\n                        language: \"python\"\n                    };\n                }\n            } catch (e) {\n                console.error(\"Code generation error:\", e);\n            }\n            break;\n        case \"swarm-of-swarms\":\n            // Execute full 6-stage pipeline\n            try {\n                // Stage 1: Strategy\n                const strategyRes = await fetch(\"http://localhost:8100/plans\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        task: message\n                    })\n                });\n                if (strategyRes.ok) {\n                    const strategy = await strategyRes.json();\n                    // Stage 2: Deep Research\n                    const researchRes = await fetch(\"http://localhost:8100/swarms/create\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            swarm_type: \"research\",\n                            task: `Research requirements for: ${message}`,\n                            context: {\n                                strategy: strategy.plans\n                            }\n                        })\n                    });\n                    // Stage 3: Planning\n                    const planRes = await fetch(\"http://localhost:8100/swarms/create\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            swarm_type: \"planning\",\n                            task: `Create implementation plan for: ${message}`,\n                            context: {\n                                strategy: strategy.plans\n                            }\n                        })\n                    });\n                    // Stage 4: Coding\n                    const codeRes = await fetch(\"http://localhost:8100/swarms/create\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            swarm_type: \"coding\",\n                            task: message,\n                            context: {\n                                plan: planRes.ok ? await planRes.json() : null\n                            }\n                        })\n                    });\n                    sections.actions = [\n                        {\n                            type: \"swarm-of-swarms.initiated\",\n                            stages: 6\n                        },\n                        {\n                            type: \"strategy.completed\"\n                        },\n                        {\n                            type: \"research.started\"\n                        },\n                        {\n                            type: \"planning.started\"\n                        },\n                        {\n                            type: \"coding.started\"\n                        }\n                    ];\n                    sections.events = [\n                        {\n                            type: \"pipeline.started\",\n                            task: message,\n                            stages: [\n                                \"strategy\",\n                                \"research\",\n                                \"planning\",\n                                \"coding\",\n                                \"qc\",\n                                \"deploy\"\n                            ]\n                        }\n                    ];\n                    sections.summary = \"Full development pipeline initiated. All 6 stages are now executing.\";\n                }\n            } catch (e) {\n                console.error(\"Swarm-of-swarms error:\", e);\n                sections.summary = \"Pipeline initialization failed, falling back to individual services\";\n            }\n            break;\n        case \"github\":\n            // GitHub operations with MCP\n            try {\n                // Detect specific GitHub operation\n                const isCommit = message.includes(\"commit\");\n                const isPR = message.includes(\"pr\") || message.includes(\"pull request\");\n                const isPush = message.includes(\"push\");\n                if (isCommit || isPR || isPush) {\n                    // Use GitHub MCP service\n                    const githubRes = await fetch(\"http://localhost:8082/github/operation\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            operation: isCommit ? \"commit\" : isPR ? \"create_pr\" : \"push\",\n                            message: message,\n                            context: context\n                        })\n                    });\n                    if (githubRes.ok) {\n                        const data = await githubRes.json();\n                        sections.github = {\n                            status: \"completed\",\n                            operation: data.operation,\n                            result: data.result\n                        };\n                        sections.actions = [\n                            {\n                                type: `github.${data.operation}`,\n                                status: \"completed\"\n                            }\n                        ];\n                    }\n                } else {\n                    // General GitHub query\n                    sections.github = {\n                        status: \"analyzing\",\n                        message: \"Analyzing GitHub request...\"\n                    };\n                    sections.actions = [\n                        {\n                            type: \"github.query\",\n                            status: \"processing\"\n                        }\n                    ];\n                }\n            } catch (e) {\n                console.error(\"GitHub operation error:\", e);\n                sections.github = {\n                    status: \"error\",\n                    message: \"GitHub service unavailable\"\n                };\n            }\n            break;\n        case \"health\":\n            // Check service health\n            const healthChecks = await checkServiceHealth();\n            sections.actions = [\n                {\n                    type: \"health.checked\",\n                    services: healthChecks.length\n                }\n            ];\n            sections.summary = `${healthChecks.filter((h)=>h.status === \"healthy\").length}/${healthChecks.length} services healthy`;\n            break;\n        default:\n            // General response\n            sections.summary = \"Processing your request...\";\n    }\n    return sections;\n}\n// Check real service health\nasync function checkServiceHealth() {\n    const services = [\n        {\n            name: \"unified-swarm\",\n            url: \"http://localhost:8100/health\"\n        },\n        {\n            name: \"mcp-context\",\n            url: \"http://localhost:8081/healthz\"\n        },\n        {\n            name: \"mcp-github\",\n            url: \"http://localhost:8082/health\"\n        },\n        {\n            name: \"mcp-research\",\n            url: \"http://localhost:8085/health\"\n        }\n    ];\n    const results = await Promise.all(services.map(async (service)=>{\n        try {\n            const res = await fetch(service.url, {\n                signal: AbortSignal.timeout(1000)\n            });\n            return {\n                ...service,\n                status: res.ok ? \"healthy\" : \"unhealthy\",\n                latency: 0\n            };\n        } catch  {\n            return {\n                ...service,\n                status: \"dead\",\n                latency: -1\n            };\n        }\n    }));\n    return results;\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const messages = body.messages || [\n            {\n                content: body.message || \"\"\n            }\n        ];\n        const message = messages[messages.length - 1]?.content || \"\";\n        const context = body.context || {};\n        // Detect intent from message\n        const intent = detectIntent(message);\n        // Route to appropriate service\n        const sections = await routeToService(intent, message, context);\n        // Build unified response with sections format expected by audit\n        const response = {\n            sections: {\n                summary: sections.summary || `I'm processing your ${intent} request...`,\n                actions: sections.actions || [],\n                research: sections.research || [],\n                plans: sections.plans || null,\n                code: sections.code || null,\n                github: sections.github || null,\n                events: sections.events || []\n            },\n            metadata: {\n                intent,\n                timestamp: new Date().toISOString(),\n                sessionId: context?.sessionId || `session_${Date.now()}`\n            }\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        console.error(\"Chat API Error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            sections: {\n                summary: \"Error processing request\",\n                actions: [],\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            }\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/unified-route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flynnmusil%2Fsophia-ai-intel-1%2Fapps%2Fsophia-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();