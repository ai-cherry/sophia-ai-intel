# Sophia AI Intel Monitoring & Observability Stack
# Prometheus, Grafana, and GPU monitoring for Lambda Labs Kubernetes

# =============================================================================
# PROMETHEUS MONITORING
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: sophia-ai-monitoring
  labels:
    app: prometheus
    component: metrics-collection
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: metrics-collection
    spec:
      serviceAccountName: prometheus-sa
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        ports:
        - name: prometheus
          containerPort: 9090
        
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1000m
            memory: 4Gi
        
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/data
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=30d
        - --web.enable-lifecycle
        - --web.enable-admin-api
        
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus/data
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 60
      
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: sophia-ai-monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - name: prometheus
    port: 9090
    targetPort: 9090
  selector:
    app: prometheus

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: sophia-ai-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s
      evaluation_interval: 30s
      external_labels:
        cluster: 'sophia-ai-lambda-labs'
        environment: 'production'
    
    rule_files:
    - /etc/prometheus/rules/*.yml
    
    scrape_configs:
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - default
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
    
    # GPU monitoring via NVIDIA DCGM
    - job_name: 'dcgm-exporter'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - sophia-ai-system
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: dcgm-exporter
    
    # Sophia AI services
    - job_name: 'sophia-agents'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sophia-ai
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: sophia-agents
    
    - job_name: 'sophia-context'  
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sophia-ai
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: sophia-context
    
    - job_name: 'sophia-research'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sophia-ai
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: sophia-research
    
    - job_name: 'redis-cluster'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - sophia-ai
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: redis

---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: sophia-ai-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: sophia-distributed
  resources:
    requests:
      storage: 100Gi

---
# Prometheus ServiceAccount and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: sophia-ai-monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: sophia-ai-monitoring

# =============================================================================
# GRAFANA DASHBOARDS
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: sophia-ai-monitoring
  labels:
    app: grafana
    component: visualization
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: visualization
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - name: grafana
          containerPort: 3000
        
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_SERVER_ROOT_URL
          value: "https://www.sophia-intel.ai/admin/grafana"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "true"
        
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
      
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: sophia-ai-monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
  selector:
    app: grafana

---
# Grafana Secrets
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: sophia-ai-monitoring
type: Opaque
data:
  admin-password: "base64_encoded_grafana_admin_password"

---
# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: sophia-ai-monitoring
data:
  grafana.ini: |
    [server]
    root_url = https://www.sophia-intel.ai/admin/grafana
    serve_from_sub_path = true
    
    [security]
    admin_user = admin
    
    [auth]
    disable_login_form = false
    
    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/sophia-overview.json

---
# Grafana Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: sophia-ai-monitoring
data:
  sophia-overview.json: |
    {
      "dashboard": {
        "title": "Sophia AI Intel - System Overview",
        "panels": [
          {
            "title": "Agent Swarm GPU Utilization",
            "type": "graph",
            "targets": [
              {
                "expr": "nvidia_gpu_utilization_percent{job=\"dcgm-exporter\"}",
                "legendFormat": "GPU {{gpu}} - {{instance}}"
              }
            ]
          },
          {
            "title": "Agent Task Completion Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(sophia_agents_tasks_completed_total[5m])",
                "legendFormat": "Tasks/sec"
              }
            ]
          },
          {
            "title": "Embedding Cache Hit Ratio",
            "type": "gauge", 
            "targets": [
              {
                "expr": "sophia_context_cache_hit_ratio",
                "legendFormat": "Hit Ratio"
              }
            ]
          },
          {
            "title": "Research Query Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sophia_research_query_duration_seconds)",
                "legendFormat": "95th percentile"
              }
            ]
          }
        ]
      }
    }

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: sophia-ai-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: sophia-distributed
  resources:
    requests:
      storage: 10Gi

# =============================================================================
# NVIDIA GPU MONITORING
# =============================================================================

# NVIDIA DCGM Exporter for GPU metrics
apiVersion: apps/v1
kind: DaemonSet
metadata:
