apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-adapter
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - pods
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/stats
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter
subjects:
- kind: ServiceAccount
  name: prometheus-adapter
  namespace: monitoring
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-adapter
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-adapter
  template:
    metadata:
      labels:
        app: prometheus-adapter
    spec:
      serviceAccountName: prometheus-adapter
      containers:
      - name: prometheus-adapter
        image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.10.0
        args:
        - --cert-dir=/var/run/serving-cert
        - --config=/etc/adapter/config.yaml
        - --logtostderr=true
        - --metrics-relist-interval=30s
        - --prometheus-url=http://prometheus-service.monitoring.svc.cluster.local:9090
        - --secure-port=6443
        ports:
        - containerPort: 6443
        volumeMounts:
        - mountPath: /etc/adapter
          name: config
          readOnly: true
        - mountPath: /var/run/serving-cert
          name: serving-cert
          readOnly: true
        - mountPath: /tmp
          name: tmp-volume
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
      volumes:
      - name: config
        configMap:
          name: adapter-config
      - name: serving-cert
        secret:
          secretName: prometheus-adapter-serving-cert
      - name: tmp-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-adapter
  namespace: monitoring
spec:
  ports:
  - port: 443
    targetPort: 6443
  selector:
    app: prometheus-adapter
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adapter-config
  namespace: monitoring
data:
  config.yaml: |
    rules:
    - seriesQuery: 'nvidia_gpu_utilization{gpu="0"}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^(.*)_gpu_utilization"
        as: "${1}_gpu_utilization"
      metricsQuery: 'avg(nvidia_gpu_utilization{gpu="0"}) by (<<.GroupBy>>)'

    - seriesQuery: 'ai_model_inference_duration_seconds'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^(.*)_inference_duration_seconds"
        as: "${1}_inference_duration"
      metricsQuery: 'histogram_quantile(0.95, rate(ai_model_inference_duration_seconds_bucket[5m]))'

    - seriesQuery: 'ai_model_memory_usage_bytes'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^(.*)_memory_usage_bytes"
        as: "${1}_memory_usage"
      metricsQuery: 'avg(ai_model_memory_usage_bytes) by (<<.GroupBy>>)'

    - seriesQuery: 'request_queue_size'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^(.*)_queue_size"
        as: "${1}_queue_size"
      metricsQuery: 'avg(request_queue_size) by (<<.GroupBy>>)'

    - seriesQuery: 'active_agent_tasks'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^(.*)_agent_tasks"
        as: "${1}_active_tasks"
      metricsQuery: 'avg(active_agent_tasks) by (<<.GroupBy>>)'

    - seriesQuery: 'active_workflows'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^(.*)_workflows"
        as: "${1}_active_workflows"
      metricsQuery: 'avg(active_workflows) by (<<.GroupBy>>)'

    - seriesQuery: 'team_concurrent_sessions'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^(.*)_concurrent_sessions"
        as: "${1}_concurrent_sessions"
      metricsQuery: 'avg(team_concurrent_sessions) by (<<.GroupBy>>)'

    - seriesQuery: 'concurrent_orchestrations'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^(.*)_orchestrations"
        as: "${1}_concurrent_orchestrations"
      metricsQuery: 'avg(concurrent_orchestrations) by (<<.GroupBy>>)'
---
apiVersion: v1
kind: Service
metadata:
  name: custom-metrics-apiserver
  namespace: monitoring
spec:
  ports:
  - port: 443
    targetPort: 6443
  selector:
    app: prometheus-adapter
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.custom.metrics.k8s.io
spec:
  service:
    name: custom-metrics-apiserver
    namespace: monitoring
  group: custom.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100