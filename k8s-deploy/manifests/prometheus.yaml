apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - /etc/prometheus/alerts.yml

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    scrape_configs:
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - source_labels: [__meta_kubernetes_node_name]
        target_label: instance

    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: replace
        target_label: app
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod

    - job_name: 'sophia-services'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - sophia
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: (mcp-.*|agno-.*|orchestrator)
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: replace
        target_label: service

    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
     # Sonic AI Kubernetes service discovery
     - job_name: 'sonic-ai-kubernetes'
       kubernetes_sd_configs:
       - role: pod
         namespaces:
           names: ['sophia']
       relabel_configs:
       - source_labels: [__meta_kubernetes_pod_label_app]
         regex: 'sonic-ai'
         action: keep
       - source_labels: [__meta_kubernetes_pod_name]
         target_label: pod_name
       - source_labels: [__meta_kubernetes_pod_label_component]
         target_label: component
       - target_label: service_name
         replacement: 'sonic-ai'
       - source_labels: [__meta_kubernetes_pod_ip]
         target_label: __address__
         replacement: '$1:8080'
       scrape_interval: 5s
       metrics_path: '/metrics'

     # Sonic AI service metrics
     - job_name: 'sonic-ai-service'
       static_configs:
       - targets: ['sonic-ai.sophia.svc.cluster.local:8080']
         labels:
           service: 'sonic-ai'
           component: 'reasoning-engine'
       scrape_interval: 5s
       metrics_path: '/metrics'

     # Sonic AI custom metrics endpoint
     - job_name: 'sonic-ai-custom-metrics'
       static_configs:
       - targets: ['sonic-ai.sophia.svc.cluster.local:8080']
         labels:
           service: 'sonic-ai'
           metrics_type: 'custom'
       scrape_interval: 10s
       metrics_path: '/metrics'
       params:
         format: ['prometheus']

     # GPU monitoring via DCGM
     - job_name: 'gpu-metrics'
       static_configs:
       - targets: ['localhost:9400']
         labels:
           service: 'gpu'
       scrape_interval: 10s
       metrics_path: '/metrics'

     # Node exporter for system metrics
     - job_name: 'node-exporter'
       kubernetes_sd_configs:
       - role: node
       relabel_configs:
       - action: labelmap
         regex: __meta_kubernetes_node_label_(.+)
       - source_labels: [__meta_kubernetes_node_name]
         target_label: instance
       scrape_interval: 30s
        target_label: service

  alerts.yml: |
    groups:
    - name: sophia-alerts
      rules:
      - alert: SophiaServiceDown
        expr: up{namespace="sophia"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Sophia AI service {{ $labels.service }} is down"
          description: "Service {{ $labels.service }} in namespace {{ $labels.namespace }} has been down for more than 5 minutes."

      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{namespace="sophia"}[5m]) > 0.8
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage for {{ $labels.pod }}"
          description: "Pod {{ $labels.pod }} is using more than 80% CPU for 10 minutes."

      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes{namespace="sophia"} / container_spec_memory_limit_bytes{namespace="sophia"}) > 0.9
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage for {{ $labels.pod }}"
          description: "Pod {{ $labels.pod }} is using more than 90% of its memory limit."

      - alert: RedisConnectionErrors
        expr: increase(redis_connection_errors_total[5m]) > 10
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High Redis connection errors"
          description: "Redis is experiencing high connection error rate."

      - alert: KubernetesNodeDown
        expr: up{job="kubernetes-nodes"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Kubernetes node {{ $labels.instance }} is down"
          description: "Node {{ $labels.instance }} has been down for more than 5 minutes."

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
roleRef:
  kind: ClusterRole
  name: prometheus
  apiGroup: rbac.authorization.k8s.io