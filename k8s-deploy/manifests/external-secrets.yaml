apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: sophia
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: azure-key-vault
  namespace: sophia
spec:
  provider:
    azurekv:
      authType: WorkloadIdentity
      vaultUrl: https://sophia-keyvault.vault.azure.net/
      serviceAccountRef:
        name: external-secrets-sa
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: gcp-secrets-manager
  namespace: sophia
spec:
  provider:
    gcpsm:
      auth:
        workloadIdentity:
          clusterLocation: us-central1
          clusterName: sophia-cluster
          serviceAccountRef:
            name: external-secrets-sa
      projectID: sophia-ai-project
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: hashicorp-vault
  namespace: sophia
spec:
  provider:
    vault:
      server: https://vault.sophia-intel.ai:8200
      path: secret
      version: v2
      auth:
        jwt:
          path: jwt
          role: external-secrets
          serviceAccountRef:
            name: external-secrets-sa
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: kubernetes-secrets
  namespace: sophia
spec:
  provider:
    kubernetes:
      server:
        url: https://kubernetes.default.svc.cluster.local
        caBundle: <base64-encoded-ca-cert>
      auth:
        serviceAccount:
          name: external-secrets-sa
          namespace: sophia
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sophia-openai-key
  namespace: sophia
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: sophia-secrets
    creationPolicy: Owner
  data:
  - secretKey: OPENAI_API_KEY
    remoteRef:
      key: production/sophia/openai-api-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sophia-database-url
  namespace: sophia
spec:
  secretStoreRef:
    name: hashicorp-vault
    kind: SecretStore
  target:
    name: sophia-secrets
    creationPolicy: Merge
  data:
  - secretKey: NEON_DATABASE_URL
    remoteRef:
      key: database/production-url
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sophia-qdrant-config
  namespace: sophia
spec:
  secretStoreRef:
    name: azure-key-vault
    kind: SecretStore
  target:
    name: sophia-secrets
    creationPolicy: Merge
  data:
  - secretKey: QDRANT_URL
    remoteRef:
      key: qdrant-url
  - secretKey: QDRANT_API_KEY
    remoteRef:
      key: qdrant-api-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sophia-redis-config
  namespace: sophia
spec:
  secretStoreRef:
    name: gcp-secrets-manager
    kind: SecretStore
  target:
    name: sophia-secrets
    creationPolicy: Merge
  data:
  - secretKey: REDIS_URL
    remoteRef:
      key: redis-production-url
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sophia-jwt-secrets
  namespace: sophia
spec:
  secretStoreRef:
    name: kubernetes-secrets
    kind: SecretStore
  target:
    name: jwt-secrets
    creationPolicy: Owner
  data:
  - secretKey: JWT_SECRET_KEY
    remoteRef:
      key: jwt-secret
      namespace: sophia
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: monitoring
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: monitoring-secrets
    creationPolicy: Owner
  data:
  - secretKey: SLACK_WEBHOOK_URL
    remoteRef:
      key: monitoring/slack-webhook
  - secretKey: SMTP_PASSWORD
    remoteRef:
      key: monitoring/smtp-password
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: sophia
  annotations:
    azure.workload.identity/client-id: "external-secrets-client-id"
    aws-iam-role: "arn:aws:iam::123456789012:role/external-secrets-role"
    gcp-service-account: "external-secrets@sophia-project.iam.gserviceaccount.com"
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-role
rules:
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets", "clustersecretstores"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["serviceaccounts", "serviceaccounts/token"]
  verbs: ["get", "list", "watch", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-binding
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: sophia
roleRef:
  kind: ClusterRole
  name: external-secrets-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: cluster-aws-secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
            namespace: sophia
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: cert-manager-dnsimple
  namespace: cert-manager
spec:
  secretStoreRef:
    name: cluster-aws-secrets
    kind: ClusterSecretStore
  target:
    name: dnsimple-secret
    creationPolicy: Owner
  data:
  - secretKey: token
    remoteRef:
      key: cert-manager/dnsimple-token
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: istio-certificates
  namespace: istio-system
spec:
  secretStoreRef:
    name: cluster-aws-secrets
    kind: ClusterSecretStore
  target:
    name: istio-tls
    creationPolicy: Owner
  data:
  - secretKey: tls.crt
    remoteRef:
      key: istio/tls-certificate
  - secretKey: tls.key
    remoteRef:
      key: istio/tls-private-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: argocd-secrets
  namespace: argocd
spec:
  secretStoreRef:
    name: cluster-aws-secrets
    kind: ClusterSecretStore
  target:
    name: argocd-secrets
    creationPolicy: Owner
  data:
  - secretKey: admin.password
    remoteRef:
      key: argocd/admin-password
  - secretKey: github.token
    remoteRef:
      key: argocd/github-token