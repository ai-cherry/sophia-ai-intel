worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main buffer=16k;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream configuration with health checks
    upstream mcp_core {
        least_conn;
        server mcp-core:8000 max_fails=3 fail_timeout=30s;
        server mcp-core:8081 max_fails=3 fail_timeout=30s;
        server mcp-core:8085 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream orchestrator {
        server orchestrator:8088 max_fails=2 fail_timeout=20s;
        keepalive 16;
    }

    upstream dashboard {
        server host.docker.internal:3000 max_fails=2 fail_timeout=20s;
        keepalive 16;
    }

    upstream sophia_brain {
        server sophia-brain:8099 max_fails=2 fail_timeout=20s;
        keepalive 16;
    }

    upstream chat_coordinator {
        server chat-coordinator:8095 max_fails=2 fail_timeout=20s;
        keepalive 16;
    }

    # API Gateway server configuration
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Request ID for tracing
        add_header X-Request-ID $request_id always;

        # Client body size
        client_max_body_size 10m;
        client_body_buffer_size 128k;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        send_timeout 30s;

        # Health check endpoint
        location /health {
            access_log off;
            default_type text/plain;
            return 200 "healthy\n";
        }

        # Dashboard
        location / {
            proxy_pass http://dashboard;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            limit_conn addr 10;

            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Route to appropriate service
            location /api/orchestrate {
                proxy_pass http://orchestrator;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                include /etc/nginx/proxy_params.conf;
            }

            location /api/chat {
                proxy_pass http://chat_coordinator;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                include /etc/nginx/proxy_params.conf;
            }

            location /api/brain {
                proxy_pass http://sophia_brain;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                include /etc/nginx/proxy_params.conf;
            }

            location /api/mcp {
                proxy_pass http://mcp_core;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                include /etc/nginx/proxy_params.conf;
                
                # Circuit breaker
                proxy_next_upstream error timeout http_502 http_503 http_504;
                proxy_next_upstream_tries 3;
                proxy_next_upstream_timeout 10s;
            }

            # Default API route
            proxy_pass http://orchestrator;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            include /etc/nginx/proxy_params.conf;
        }

        # Monitoring endpoints
        location /metrics {
            proxy_pass http://prometheus:9090/metrics;
            access_log off;
        }

        location /grafana/ {
            proxy_pass http://grafana:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # WebSocket support
        location /ws {
            proxy_pass http://orchestrator;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS configuration (when SSL is ready)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Include all location blocks from port 80
        include /etc/nginx/sites-available/api-routes.conf;
    }
}